"Response ID","What is your highest level of education?","How often do you reverse malware?","For how long are you reversing malware?","How much experience do you have in .. ? [Reversing]","How much experience do you have in .. ? [Malware Analysis]","How much experience do you have in .. ? [Writing C-code]","Which binary code decompiler have you used before? (multiple answers are possible) [Hex-Rays]","Which binary code decompiler have you used before? (multiple answers are possible) [Ghidra]","Which binary code decompiler have you used before? (multiple answers are possible) [BinaryNinja HLIL]","Which binary code decompiler have you used before? (multiple answers are possible) [Boomerang]","Which binary code decompiler have you used before? (multiple answers are possible) [REC]","Which binary code decompiler have you used before? (multiple answers are possible) [DISC]","Which binary code decompiler have you used before? (multiple answers are possible) [Other]","In this part, we will show you one decompiled sample. The sample is either decompiled with IDA, Ghidra or our developed decompiler.  There will be questions about the code-style and/or output quality as well as two comprehension questions.     Versions:  - Ghidra 9.2.1  - IDA 7.5.200728 Linux x86_64 (32-bit address size)","","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [The used control-flow structures are appropriate.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [The control-flow is strangely restructured.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [It was easy to understand the code.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [It took much effort to understand the code.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [It seems that there are no unused instructions.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [There are too much unused instructions.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [I think the code is correctly decompiled.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [The decompiled code seems to be incorrect.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [The conditions are too complex.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [The code contains too many intermediate results.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [The line length is too long]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [Many variables have useless copies.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [There are no useless copies of variables.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [The variable types seem to be reasonable.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [Some variable types seem to be wrong.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [There are no variables that only store unnecessary intermediate constants.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).    .tb_button {padding:1px;cursor:pointer;border-right: 1px solid #8b8b8b;border-left: 1px solid #FFF;border-bottom: 1px solid #fff;}.tb_button.hover {borer:2px outset #def; background-color: #f8f8f8 !important;}.ws_toolbar {z-index:100000} .ws_toolbar .ws_tb_btn {cursor:pointer;border:1px solid #555;padding:3px}   .tb_highlight{background-color:yellow} .tb_hide {visibility:hidden} .ws_toolbar img {padding:2px;margin:0px} [There are too many variables that just store intermediate constants.]","What is the output of the function for the parameters [arg_1 = 0 and arg_2 = 1]","What is the output of the function for the parameters [arg_1 = 1 and arg_2 = 0]","Which computation needs more recursive calls?","What do you like or dislike about the above sample?","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [The used control-flow structures are appropriate.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [The control-flow is strangely restructured.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [It was easy to understand the code.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [It took much effort to understand the code.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [It seems that there are no unused instructions.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [There are too much unused instructions.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [I think the code is correctly decompiled.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [The decompiled code seems to be incorrect.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [The conditions are too complex.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [The code contains too many intermediate results.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [The line length is too long]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [Many variables have useless copies.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [There are no useless copies of variables.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [The variable types seem to be reasonable.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [Some variable types seem to be wrong.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [There are no variables that only store unnecessary intermediate constants.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [There are too many variables that just store intermediate constants.]","What is the output of the function for the parameters [arg_1 = 0 and arg_2 = 1]","What is the output of the function for the parameters [arg_1 = 1 and arg_2 = 0]","Which computation needs more recursive calls?","What do you like or dislike about the above sample?","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [The used control-flow structures are appropriate.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [The control-flow is strangely restructured.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [It was easy to understand the code.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [It took much effort to understand the code.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [It seems that there are no unused instructions.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [There are too much unused instructions.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [I think the code is correctly decompiled.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [The decompiled code seems to be incorrect.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [The conditions are too complex.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [The code contains too many intermediate results.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [The line length is too long]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [Many variables have useless copies.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [There are no useless copies of variables.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [The variable types seem to be reasonable.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [Some variable types seem to be wrong.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [There are no variables that only store unnecessary intermediate constants.]","Please consider the following decompiled function and answer the questions below. Feel free to use the editor as you would normally do (e.g. by renaming variables).   [There are too many variables that just store intermediate constants.]","What is the output of the function for the parameters [arg_1 = 0 and arg_2 = 1]","What is the output of the function for the parameters [arg_1 = 1 and arg_2 = 0]","Which computation needs more recursive calls?","What do you like or dislike about the above sample?","In this part, we will show you short code-snippets that are decompiled with three different decompilers, IDA, Ghidra and our developed decompiler.   For each sample, the task will be to rank them and to answer some specific questions. Is it not necessary to understand the samples in detail.     Versions:  - Ghidra 9.2.1  - IDA 7.5.200728 Linux x86_64 (32-bit address size)","Please consider the following three samples and order them from your favourite to least favourite:    	 		 			Sample 1  			Sample 2  			Sample 3  		 		 			 			  			  			 			  			  			 			  [Rank 1]","Please consider the following three samples and order them from your favourite to least favourite:    	 		 			Sample 1  			Sample 2  			Sample 3  		 		 			 			  			  			 			  			  			 			  [Rank 2]","Please consider the following three samples and order them from your favourite to least favourite:    	 		 			Sample 1  			Sample 2  			Sample 3  		 		 			 			  			  			 			  			  			 			  [Rank 3]"," Do you prefer switch or if-else when there are at most 2 or 3 cases?"," Do you prefer switch or if-else when there are at most 2 or 3 cases? [Comment]","If the value of a variable is known due to a condition, i.e., Branch or Switch, should it be propagated?","If the value of a variable is known due to a condition, i.e., Branch or Switch, should it be propagated? [Comment]","What did you like most about your favourite sample?","What did you dislike about your least favourite sample?","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 1]","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 2]","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 3]","Do you prefer switch or if-else in a switch-case?","Do you prefer switch or if-else in a switch-case? [Comment]","Do you prefer  ""else if"" as one expression, if possible, (as in sample 3 lines 10 and 14) or separated into two expressions (as in sample 1 lines 16/17)?","Do you prefer  ""else if"" as one expression, if possible, (as in sample 3 lines 10 and 14) or separated into two expressions (as in sample 1 lines 16/17)? [Comment]","What did you like most about your favourite sample?","What did you dislike about your least favourite sample?","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 1]","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 2]","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 3]","Do you think goto is a good choice when breaking out of the inner loop?","Do you think goto is a good choice when breaking out of the inner loop? [Comment]","Do you think it is a good idea to duplicate (return-)statements to avoid complicated conditions or gotos?","Do you think it is a good idea to duplicate (return-)statements to avoid complicated conditions or gotos? [Comment]","What did you like most about your favourite sample?","What did you dislike about your least favourite sample?","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 1]","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 2]","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 3]","Do you prefer while(true){} or do{}while(true)?","Do you prefer while(true){} or do{}while(true)? [Comment]","Do you prefer continue-statements and only one if-statement or no continue-statement and an if-else-statement?","Do you prefer continue-statements and only one if-statement or no continue-statement and an if-else-statement? [Comment]","What did you like most about your favourite sample?","What did you dislike about your least favourite sample?","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 1]","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 2]","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 3]","Do you prefer the condition if(var == 0) or if(!var)?","Do you prefer the condition if(var == 0) or if(!var)? [Comment]","What did you like most about your favourite sample?","What did you dislike about your least favourite sample?","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 1]","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 2]","Please consider the following three samples and order them from your favourite to least favourite: .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }     Sample 1Sample 2Sample 3                [Rank 3]","Do you prefer for-loops or while-loops?","Do you prefer for-loops or while-loops? [Comment]","What did you like most about your favourite sample?","What did you dislike about your least favourite sample?","In this part, we will show you short code-snippets that are decompiled with different configurations. For example, you will see different naming schemes for variables and parameters.  For each sample, the task will be to rank them or to choose your favourite one.","We have decompiled the same function with different expression propagation limits. Please choose your favourite version with respect to the most optimal nesting complexity of instructions. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  limit 1limit 3limit 5limit 7limit 10                         ","We have decompiled the same function with different expression propagation limits. Please choose your favourite version with respect to the most optimal nesting complexity of instructions. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  limit 1limit 3limit 5limit 7limit 10                          [Comment]","Please take a look at the following function and evaluate it with respect to long subexpressions that occur multiple times. Choose the most appropriate one. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }    234               ","Please take a look at the following function and evaluate it with respect to long subexpressions that occur multiple times. Choose the most appropriate one. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }    234                [Comment]","We have decompiled the same function with different configurations. Please choose up to three samples that are most comprehensible to you. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  Sample 1Sample 2Sample 3Sample 4Sample 5Sample 6                               [Sample 1]","We have decompiled the same function with different configurations. Please choose up to three samples that are most comprehensible to you. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  Sample 1Sample 2Sample 3Sample 4Sample 5Sample 6                               [Comment]","We have decompiled the same function with different configurations. Please choose up to three samples that are most comprehensible to you. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  Sample 1Sample 2Sample 3Sample 4Sample 5Sample 6                               [Sample 2]","We have decompiled the same function with different configurations. Please choose up to three samples that are most comprehensible to you. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  Sample 1Sample 2Sample 3Sample 4Sample 5Sample 6                               [Comment]","We have decompiled the same function with different configurations. Please choose up to three samples that are most comprehensible to you. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  Sample 1Sample 2Sample 3Sample 4Sample 5Sample 6                               [Sample 3]","We have decompiled the same function with different configurations. Please choose up to three samples that are most comprehensible to you. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  Sample 1Sample 2Sample 3Sample 4Sample 5Sample 6                               [Comment]","We have decompiled the same function with different configurations. Please choose up to three samples that are most comprehensible to you. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  Sample 1Sample 2Sample 3Sample 4Sample 5Sample 6                               [Sample 4]","We have decompiled the same function with different configurations. Please choose up to three samples that are most comprehensible to you. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  Sample 1Sample 2Sample 3Sample 4Sample 5Sample 6                               [Comment]","We have decompiled the same function with different configurations. Please choose up to three samples that are most comprehensible to you. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  Sample 1Sample 2Sample 3Sample 4Sample 5Sample 6                               [Sample 5]","We have decompiled the same function with different configurations. Please choose up to three samples that are most comprehensible to you. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  Sample 1Sample 2Sample 3Sample 4Sample 5Sample 6                               [Comment]","We have decompiled the same function with different configurations. Please choose up to three samples that are most comprehensible to you. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  Sample 1Sample 2Sample 3Sample 4Sample 5Sample 6                               [Sample 6]","We have decompiled the same function with different configurations. Please choose up to three samples that are most comprehensible to you. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  Sample 1Sample 2Sample 3Sample 4Sample 5Sample 6                               [Comment]","Please enter your comment here:","Please take a look at the following function that was decompiled either using a for-loop or using a while-loop. Choose the output that you prefer. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }      ","Please take a look at the following function that was decompiled either using a for-loop or using a while-loop. Choose the output that you prefer. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }       [Comment]","The output contains various of byte constant (from printable ASCII range) representation in the decompiler output. Rank them from most to least favourite. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  charchar-decimal-in-commentdecimaldecimal-char-in-comment                     [Rank 1]","The output contains various of byte constant (from printable ASCII range) representation in the decompiler output. Rank them from most to least favourite. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  charchar-decimal-in-commentdecimaldecimal-char-in-comment                     [Rank 2]","The output contains various of byte constant (from printable ASCII range) representation in the decompiler output. Rank them from most to least favourite. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  charchar-decimal-in-commentdecimaldecimal-char-in-comment                     [Rank 3]","The output contains various of byte constant (from printable ASCII range) representation in the decompiler output. Rank them from most to least favourite. .tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 6px 12px;   border: 1px solid #ccc;   border-top: none; }  charchar-decimal-in-commentdecimaldecimal-char-in-comment                     [Rank 4]","Please enter your comment here:","Please consider the following variable naming schemes and rate them from favourite to least favourite:   [Rank 1]","Please consider the following variable naming schemes and rate them from favourite to least favourite:   [Rank 2]","Please consider the following variable naming schemes and rate them from favourite to least favourite:   [Rank 3]","Please consider the following variable naming schemes and rate them from favourite to least favourite:   [Rank 4]","Please consider the following variable naming schemes and rate them from favourite to least favourite:   [Rank 5]","Do you have any better ideas for variable naming schemes?","Please consider the following parameter naming schemes and rate them from favourite to least favourite:   [Rank 1]","Please consider the following parameter naming schemes and rate them from favourite to least favourite:   [Rank 2]","Please consider the following parameter naming schemes and rate them from favourite to least favourite:   [Rank 3]","Please consider the following parameter naming schemes and rate them from favourite to least favourite:   [Rank 4]","Do you have any better ideas for parameter naming schemes?","Please consider the following two code snippets. Do you prefer reusing variable names for successive for-loops?    	 		 			Reuse  			No Reuse  		 		 			 			  			  			 			 ","Please consider the following two code snippets. Do you prefer reusing variable names for successive for-loops?    	 		 			Reuse  			No Reuse  		 		 			 			  			  			 			  [Comment]","In this part, we will ask you three questions about features you would like to have and malware sample you would like to see in the next survey.","What other optimization/de-optimization features would you like to see in your decompiled code? (for example, string/ip address does not appear correctly, thus hard to trace origin, etc.)","What quality of life features (for example, GUI interactivity, etc.) do you think would help you use a decompiler much more effectively?","Is there any particular malware sample (or even a specific function), family, or functionality you would like to see as a decompiled output for the next survey?","Total time","Group time: Baseline Questions","Question time: BQ1","Question time: BQ2","Question time: BQ3","Question time: BQ4","Question time: BQ5","Group time: Part A Intro","Question time: A0Q1","Question time: arandomsample","Group time: Part A Our decompiler","Question time: Aour","Question time: AourQ1","Question time: AourQ2","Question time: AourQ4","Group time: Part A IDA","Question time: AIDA","Question time: AIDAQ1","Question time: AIDAQ2","Question time: AIDAQ4","Group time: Part A Ghidra","Question time: AGhidra","Question time: AGhidraQ1","Question time: AGhidraQ2","Question time: AGhidraQ4","Group time: Part B","Question time: B0Q0","Group time: Part B - Q1","Question time: BQ1Q1","Question time: BQ1Q2","Question time: BQ1Q3","Question time: BQ1Q4","Question time: BQ1Q5","Group time: Part B - Q2","Question time: BQ2Q1","Question time: BQ2Q2","Question time: BQ2Q3","Question time: BQ2Q4","Question time: BQ2Q5","Group time: Part B - Q3","Question time: BQ3Q1","Question time: BQ3Q2","Question time: BQ3Q3","Question time: BQ3Q4","Question time: BQ3Q5","Group time: Part B - Q4","Question time: BQ4Q1","Question time: BQ4Q2","Question time: BQ4Q3","Question time: BQ4Q4","Question time: BQ4Q5","Group time: Part B - Q5","Question time: BQ5Q1","Question time: BQ5Q3","Question time: BQ5Q4","Question time: BQ5Q5","Group time: Part B - Q6","Question time: BQ6Q1","Question time: BQ6Q2","Question time: BQ6Q4","Question time: BQ6Q5","Group time: Part C Intro","Question time: C0Q1","Group time: Part C Q1: expression propagation limits","Question time: C1","Group time: Part C Q2: common subexpression elimination","Question time: C2","Group time: Part C Q3: mix of config options","Question time: C3","Question time: CQ31","Group time: Part C Q4: Complexity of for-loop conditions","Question time: C4","Group time: Part C Q5: byte constants representation","Question time: C5","Question time: CQ51","Group time: Part C Q6","Question time: C6","Question time: C6F","Group time: Part C Q7","Question time: C7","Question time: C7F","Group time: Part C Q8","Question time: C8","Group time: Part D Intro","Question time: Dintro","Group time: Part D","Question time: D1Q1","Question time: D1Q2","Question time: D1Q3"
"37","Master","Less","","2","3","9","No","No","No","No","No","No","JD-GUI","","1","agree","disagree","disagree","agree","strongly agree","strongly disagree","unsure","unsure","strongly disagree","unsure","strongly disagree","disagree","agree","agree","disagree","agree","unsure","2","2","arg_1 = 2 and arg_2 = 1","I'm not sure what the function was intendend to do, hence, I also don't know if it is decompiled correctly. Also, I'm not sure whether the code could have been simplified. I think so, but I would have to spend more time to think about it. Still, the code was easy and understandable enough to follow it using pen and paper.

What I didn't like (major issue): the ""+ 0xffffffff"" and ""& 0xffffffff"" parts. I'm not sure if the 0xffffffff in line 9 does anything and it took me really long to figure out that ""+ 0xffffffff"" is -1 (you got me here). Especially the 0xffffffff in line 21 is totally confusing and should definitely be -1.

What I didn't like (minor issue): I'm not a fan of casts cluttering the code. I removed them in the editor to not be distracted anymore. I'm not sure if there are corner cases, but do we really need them in this function?

What I didn't like (even less important): I would have preferred an early return in line 5.

(Why do I have to answer the each question twice (pos./neg. form)?)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","if-else","Actually, I don't care in this case, but when writing code, I'd probably use if-else. So, this would be the natural choice here.","yes, the value should be propagated","","It look very clean and concise. Except for the missing break in case 5 (missing breaks are always confusing), it's possible to immediately see what's going on.","I think both, sample 2 and 3, are very cluttered. For sample 3: ifs combined with gotos? Please, no! However, I like that sample 3 has *2 instead of shifts.","Sample 3","Sample 1","Sample 2","if-else","Actually, none of the  above. In my opinion, the cases of a switch stmt. should be rather short and not contain any other control flow constructs.","one expression","","Again, it's short and concise. No deeply nested control flow structures, clean conditions.","Switch in switch is awful!","Sample 1","Sample 2","Sample 3","no, goto should not be used","","copy statements to simplify the structure","","Same as always: it's the shortest one and it doesn't contain any unusual constructs.","Deep nesting, lots of variables; this looks totally cluttered.","Sample 1","Sample 2","Sample 3","while","","continue and if","But I think this depend on the sample at hand. Might be different for different samples.","Hard to explain in this case. It just looks more ""natural"". Maybe bacause we have one indent-level less.","This looks obscure somehow.","Sample 1","Sample 2","Sample 3","if(var == 0)","If you want to match the number 0 use 0. Use ! only for booleans or ""wrong things"".","The control flow structure looks best to me.","Here we have the worst structure of the three samples.","Sample 2","Sample 1","Sample 3","for-loops","In my opinion for loops are always preferable as long as you keep any magic or complex things out of the loop header. Don't do any complex or unexpected computations in your loop header.","It was the only one where I could understand what's going on whithin the first 5-10 seconds.","The while(true) loops were unexpected here.","","limit 5","I was balancing between 5 and 7. 1 and 3 have too many lines. In 7 I find the computation in the for loop header too complex, I also don't understand why it doesn't have var_4 = var_5. In 10 the lines are too complex. But that may be because of the arithmetic stuff. Lots of shifts and +- are more complex than calls to functions with meaningful names for instance.
I. e. for arithmetic stuff I'd probably opt for shorter lines while I'd accept longer lines for function calls.","2","","No","","No","","No","","Yes","","Yes","","No","","","while-loop","As I mentioned earlier: in general for loops are better, but not if you have complex computations in the header. Also, this is a very unintuitive way to use a foor loop (empty, body, using the ""counter"" variable after the loop).","char + decimal as comment","decimal + char as comment","char","decimal","Maybe not directly related, but: if it's possible to detect that the code checks for capital letters e.g. then I'd prefer to have the condition altered to var >= 'A'.","Scheme 2 (v1,...)","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","Scheme 3 (dog,...)","Scheme 4 (a,...)","Sorry, unfortunately not. What would be important would be that function arguments are distinguishable from local variables.

While I ranked the animal scheme rather low, I'm actually not sure if it would be a bad idea. Unconventionally, but short words might be harder to confuse and easier to remember than the short v-things. I would have to see a larger code sample with animals to evaluate this.

Also, I'm undecided if it makes sense to name counter variables ""counter_1"" or something (can you could detect this?). Not sure if consistency would be preferable here.","Scheme 4","Scheme 1","Scheme 2","Scheme 3","See my answer from the previous questions. Maybe I'd like arg1 more than arg_1, but that's a minor issue.

Again, I'm not sure about the animals. Might actually be a good idea (I'm more the visual type of person), but you should evaluate this separately with more samples.","I prefer Reuse","But really only if the variable is exclusively used as a simple counter in the loop. If you have stunts like in one of the previous samples (the one with the empty body), I'd prefer different names.","","Hard to say, I'd have to spend more time decompiling code to actually give an answer here. IP adresses would be great, though!

It's hard to convey, but I'd like the output to look like a human could have written  the code. In the previous answers this is mostly what I called short and concise. I don't thinks that any human (with a sane mind) would write switches in switches in a do-while loop for instance. So, I'd expect this also not to appear in the output of a decompiler. I'd like to have clean code ;-)","An interactive GUI would be gold! I'd like to be able to rename variables and replace statements with different statements which I find easier to understand. So, basically some simple refactoring features like IDEs provide. Also, other features an IDE provides would be great (code (un-)folding, highlighting a seleced variable etc.). It would also be great to change the representation for single variables, e.g. have one variable as hex and a different one as char (selectable by the user).","I don't want a specific sample here, but I'd like to see more ""real-world"" code. E.g. network connections and file system interactions and stuff like that.","9505.07","101.45","","","","","","33.15","","","4018.45","","","","","","","","","","","","","","","6.66","","613.12","","","","","","456.76","","","","","","337.28","","","","","","364.32","","","","","","242.83","","","","","315.32","","","","","33.07","","486.38","","63.87","","237.04","","","114.47","","268.8","","","470.09","","","335.08","","","112.66","","10.35","","883.92","","",""
"40","PhD","Less","","4","1","8","No","Yes","No","No","No","No","","","2","","","","","","","","","","","","","","","","","","","","","","undecided","weakly agree","weakly agree","weakly disagree","agree","weakly disagree","undecided","disagree","strongly disagree","disagree","disagree","weakly disagree","weakly disagree","weakly agree","agree","disagree","weakly disagree","2","1","arg_1 = 1 and arg_2 = 2","var_0 seems redundant
arg_2 seems to have type unsigned_int and not int","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 3","Sample 2","if-else","On fall-through cases (like in the example), I prefer switch. Else I prefer if-else on at most 3 cases.","no, the value should not be propagated","The variable name sometimes hold semantic information that would get lost if only the value gets propagated (like in sample 2, line 11) Even the used operation (like adding one) can contain useful meaning, even if the result is known (to be 6 like in the samples). Best case would be writing known values as comments behind statements where the value is known.","Sample 1 - very easy to follow the control flow","Sample 2 - mixing of == and != as if-else conditions thus one has to be alert to not mix them up when following the control flow.","Sample 3","Sample 1","Sample 2","if-else if switch has at most 2 cases and switch otherwise","","one expression","","Easy to follow control flow","Noise from typecasts and switch statements, where if-else would have been more natural.","Sample 1","Sample 2","Sample 3","yes, goto is a good choice","As long as goto is only used similar to a ""break;"" statement, it can help readability. But if mixed with other control flow constructs it often reduces readability.","never copy a statement","If a statement is complicated, you may end up trying to understand it twice instead of once. I also sometimes accidentally overlook return statements in the code when skimming over it. Just one return at the end decreases the risk of that happening.","Easy to follow control flow, the scanf-string was inserted in the code.","Too many local variables","Sample 1","Sample 2","Sample 3","while","","continue and if","Everything that reduces perceived code complexity helps.","","while(true) and goto inside a loop","Sample 1","Sample 2","Sample 3","if(var == 0)","","string argument for scanf inserted into the code.","","Sample 2","Sample 3","Sample 1","for-loops","","concise","do-while","","limit 3","Limit 7 looks best here due to statement symmetry, but I assume that this does not generalize.","2","","Yes","","Yes","","Yes","","No","","No","","No","","","while-loop","complicated expressions in loop header of for-loops is a no-go.","char + decimal as comment","char","decimal + char as comment","decimal","","Scheme 3 (dog,...)","Scheme 5 (loc_1,...)","Scheme 1 (var_0,...)","Scheme 2 (v1,...)","Scheme 4 (a,...)","","Scheme 1","Scheme 4","Scheme 2","Scheme 3","param_dog, param_cat, param_wolf, ...","I prefer Reuse","","","","highlighting (like highlighting all occurences of one variable),
additional information on mouse-over (like known variable values?).","","5005.44","81.77","","","","","","19.21","","","","","","","","829.72","","","","","","","","","","113.88","","1083.92","","","","","","425.99","","","","","","871.03","","","","","","348.16","","","","","","120.6","","","","","139.5","","","","","8.57","","236.95","","42.82","","100.84","","","100.8","","123.28","","","90.68","","","72.3","","","24.7","","8.14","","162.58","","",""
"43","Master","Less","","2","2","4","No","Yes","No","No","No","No","","","1","unsure","unsure","unsure","unsure","agree","disagree","unsure","unsure","disagree","unsure","strongly disagree","disagree","agree","weakly agree","weakly disagree","agree","disagree","2","2","arg_1 = 1 and arg_2 = 2","Recursion. Bah.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 2","Sample 1","Sample 3","if-else","Depends. If every switch with code has a break, it's fine, but not like this.","no, the value should not be propagated","Without a hint, it's confusing. ""Why are we setting the variable to 6 here?""","no goto, no code in switch statements without break","goto","Sample 3","Sample 1","Sample 2","if-else if switch has at most 2 cases and switch otherwise","depends on the context","one expression","","it's not my least favourite sample","so many fucking casts","Sample 1","Sample 2","Sample 3","no, goto should not be used","As you see in Sample 1, it's just unnecessary","copy statements to simplify the structure","","It's short","It's so fucking long and uses a bunch of variables","Sample 1","Sample 2","Sample 3","while","Depends on the situation, eh?","continue and if","Also depends on the situation","an outer for loop","Why are we using goto again","Sample 1","Sample 2","Sample 3","if(var == 0)","This is clearly not Python","no strange auxiliary variables for the scanf","no for loops","Sample 2","Sample 3","Sample 1","for-loops","It's easier to see how often they loop","It's short","The do-while loop","","limit 3","Only two operands per line in that long block of calculations please","2","I do not understand what you want from me here","Yes","","No","","No","","No","","No","","No","","They all look the same to me","while-loop","Why is that an empty for loop with a big condition, what is this nonsense","char","decimal + char as comment","decimal","char + decimal as comment","Come on, either this is text, then I want to see a character, or it is a number, then I want to see a number, and if the decompiler is wrong, I want to easily see that by looking at what chars the numbers are","Scheme 1 (var_0,...)","Scheme 2 (v1,...)","Scheme 3 (dog,...)","Scheme 4 (a,...)","Scheme 5 (loc_1,...)","Guess the function of the variable and pick a suitable name :3","Scheme 4","Scheme 1","Scheme 2","Scheme 3","Guess the function of the parameters and pick a suitable name :3","I prefer Reuse","","","sensible names from the start","sensible names from the start","no","3151.31","37.83","","","","","","11.68","","","1250.35","","","","","","","","","","","","","","","6.39","","241.65","","","","","","270.36","","","","","","331.81","","","","","","145.98","","","","","","141.45","","","","","112.55","","","","","6.03","","82.2","","49.11","","79.23","","","80.18","","115.97","","","52.87","","","39.51","","","23.3","","4.08","","68.78","","",""
"49","Master","Less","","2","1","9","No","Yes","No","No","No","No","","","2","","","","","","","","","","","","","","","","","","","","","","weakly agree","weakly disagree","weakly disagree","weakly agree","strongly agree","weakly disagree","undecided","undecided","strongly disagree","weakly agree","strongly disagree","weakly agree","disagree","agree","agree","strongly disagree","weakly agree","2","2","arg_1 = 2 and arg_2 = 1","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","But that also depends on the complexity of the conditions.","yes, the value should be propagated","While this should be done in general, in some cases it would be helpful to leave the conditions as they are, to understand the underlying structure.
Otherwise there would pop up some random numbers and pruned conditions and it is not clear what they mean.","clear structure","deeper nested structure and gotos","Sample 3","Sample 2","Sample 1","if-else if switch has at most 2 cases and switch otherwise","","one expression","","Easy to read, only one condition dazzled me","unnecessary if-block where the reason is not clear ","Sample 1","Sample 2","Sample 3","no, goto should not be used","In this particular case, the goto is unnecessary, because the function can terminate. But in general a goto to jump out of an inner loop can improve the readability. ","copy statements to simplify the structure","In general duplication of code is bad and yields convoluted code, but to a certain extend and to simplify the structure, this might help.","short, intention of the function is very clear","too many variables to keep track of","Sample 2","Sample 1","Sample 3","while","","continue and if","But only if the body of the if-statement is short and at the top of the loop","the two while-loops made the scope of the values clear, decrement and increment operations","logic is not clear at all, if one has not seen the two other samples beforehand","Sample 2","Sample 1","Sample 3","if(var == 0)","","clear data and pointer types","unneeded variable, variable initialization in the while-condition","Sample 2","Sample 1","Sample 3","for-loops","depends, but in this case the for-loops are better","clear logic, function call in the if-condition avoids unnecessary variable assignment","if-condition with break right after the function start distracts from the intention and should be a do-while-loop","","limit 5","7 and 10 are unnecessary complex, there are too many operations  to keep track of
1 is useless
3 and 5 are better","2","4 is horrible, to much is happening at once and it is already difficult to keep track of opening and closing paranthesis
updating var_3 in two steps seems reasonable","No","","Yes","","Yes","","No","","No","","No","","","while-loop","the assignment is much to long
the resulting empty body seems weird
also the assignment right after the body throws me of","char + decimal as comment","decimal + char as comment","char","decimal","only the decimal is hard to understand without a ascii table right next to it...","Scheme 4 (a,...)","Scheme 3 (dog,...)","Scheme 2 (v1,...)","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","No, but I don't like the naming schemes where only an integer is incremented in the scheme. 
This makes the variables visually hard to distinguish.
When (or if) the exact meaning of the variable is clear, it can be renamed after all.","Scheme 4","Scheme 2","Scheme 3","Scheme 1","Again, no, but the parameters should stand out from the local variables. ","I prefer Reuse","Other variable names ('jklmn') should be reserved for nested for-loops.","","Array-detection
String-detection
","Scriptability and thus customizeability
integration of my favourite text editor","","4782.14","215.57","","","","","","17.88","","","","","","","","1145.71","","","","","","","","","","8.14","","244.18","","","","","","261.5","","","","","","438.67","","","","","","364.75","","","","","","491.64","","","","","311.62","","","","","8.28","","117.65","","206.96","","155.16","","","123.85","","120.11","","","172.88","","","165.33","","","70.29","","5.24","","136.73","","",""
"51","Bachelor","Less","","9","1","9","Yes","Yes","No","No","No","No","","","1","agree","disagree","unsure","unsure","agree","weakly disagree","agree","disagree","disagree","disagree","strongly disagree","strongly disagree","agree","agree","disagree","strongly agree","disagree","2","I do not know","arg_1 = 2 and arg_2 = 1","var_0 seems reused for a lot of things","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","","yes, the value should be propagated","","Clean","Too complicated","Sample 3","Sample 1","Sample 2","if-else if switch has at most 2 cases and switch otherwise","","one expression","","Clean","Too complicated","Sample 1","Sample 2","Sample 3","yes, goto is a good choice","","copy statements to simplify the structure","","Simple","Complicated","Sample 1","Sample 2","Sample 3","while","","continue and if","","Clean","Complicated","Sample 1","Sample 2","Sample 3","if(!var)","","Cleaner","Complicated","Sample 2","Sample 3","Sample 1","while-loops","","Cleaner","Complicated","","limit 5","Cleaner","3","","No","","Yes","","No","","No","","No","","No","","","for-loop","","char","decimal","char + decimal as comment","decimal + char as comment","","Scheme 1 (var_0,...)","Scheme 2 (v1,...)","Scheme 5 (loc_1,...)","Scheme 4 (a,...)","Scheme 3 (dog,...)","","Scheme 4","Scheme 2","Scheme 1","Scheme 3","","I prefer No Reuse","","","","","","33001.7","145.36","","","","","","8.7","","","22929.6","","","","","","","","","","","","","","","453.93","","140.82","","","","","","1028.01","","","","","","146.59","","","","","","1086.71","","","","","","6664.31","","","","","42.82","","","","","3.98","","37.43","","80.39","","30.51","","","15.6","","38.01","","","31.49","","","90.56","","","11.69","","3.84","","11.35","","",""
"55","Bachelor","Monthly","","3","1","3","Yes","Yes","No","No","No","No","","","1","agree","weakly agree","weakly disagree","weakly agree","agree","weakly disagree","agree","weakly disagree","weakly disagree","weakly disagree","weakly disagree","weakly disagree","weakly agree","agree","weakly disagree","weakly agree","weakly agree","2","2","arg_1 = 1 and arg_2 = 2","untidy while loop","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","","yes, the value should be propagated","","easy to understand the control flow conditions","messy, use of gotos makes code more difficult to follow, conditions are harder to understand","Sample 3","Sample 1","Sample 2","if-else if switch has at most 2 cases and switch otherwise","","one expression","","very clear and concise control flow conditions, compared to the other samples.","nested switch case, conditions that require more time to understand (even if it may be more representative of the asm instructions)","Sample 1","Sample 2","Sample 3","yes, goto is a good choice","If we are only comparing between sample 2 and 3, then yes it makes the decompiled code easier to read.","copy statements to simplify the structure","In this case, it produced much cleaner decompiled code, so yes.","Much easier to read, looks more like code someone will write.","Too many variables to track.","Sample 2","Sample 1","Sample 3","while","","if-else","","the exit condition variables are more easy to track compared to the rest.","harder to keep track of when/how the loop exits","Sample 2","Sample 1","Sample 3","if(var == 0)","","least disliked","while loop when for loop works","Sample 2","Sample 3","Sample 1","for-loops","","no wasted variables, easy to follow code","do while","","limit 5","","2","","No","","No","","Yes","","Yes","","No","","Yes","","","while-loop","","char","char + decimal as comment","decimal","decimal + char as comment","","Scheme 2 (v1,...)","Scheme 1 (var_0,...)","Scheme 3 (dog,...)","Scheme 5 (loc_1,...)","Scheme 4 (a,...)","","Scheme 2","Scheme 4","Scheme 1","Scheme 3","","I prefer No Reuse","","","Solving the C++ decompiled code mess, ability to generate vtables and jumping to indirect function calls","Live group collaboration on the same file, better annotations/note taking, better structure reconstruction","","2844.02","536.14","","","","","","6.74","","","494.06","","","","","","","","","","","","","","","20.66","","165.94","","","","","","390.2","","","","","","172.38","","","","","","210.25","","","","","","218.99","","","","","105.92","","","","","7.04","","66.57","","39.02","","80.93","","","32.46","","34.07","","","34.56","","","33.05","","","25.23","","3.42","","166.39","","",""
"58","Bachelor","Less","","1","2","2","Yes","No","No","No","No","No","","","3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","weakly agree","weakly disagree","weakly agree","weakly agree","weakly agree","weakly disagree","weakly agree","weakly disagree","weakly disagree","weakly agree","weakly disagree","weakly disagree","weakly agree","agree","disagree","weakly agree","agree","2","2","arg_1 = 2 and arg_2 = 1","the variables name are too similar and have to manually change them, if not very confusing.","","Sample 1","Sample 2","Sample 3","switch","","yes, the value should be propagated","","simple and can be easily understood with single look","need longer time to understand the code","Sample 3","Sample 1","Sample 2","if-else if switch has at most 2 cases and switch otherwise","","one expression","","more compact and easily understandable","switch case in this scenario become rather confusing.","Sample 1","Sample 2","Sample 3","no, goto should not be used","","copy statements to simplify the structure","","compact and easy to understand","long length of code","Sample 1","Sample 2","Sample 3","while","","continue and if","","the loop is easier to understand in sample 1","dislike 'goto' and 'while loop' being used together as need to jump around the code more often.","Sample 2","Sample 1","Sample 3","if(var == 0)","","more simplified","dislike the while-loop in this scenario, prefer for-loop in other sample","Sample 2","Sample 3","Sample 1","for-loops","","for-loop is easier to follow and do the dividable calculation.","the while loop make the code more confusing to do the dividable calculation","","limit 10","","4","","No","","No","","No","","Yes","","Yes","","Yes","","","while-loop","","char","char + decimal as comment","decimal + char as comment","decimal","","Scheme 3 (dog,...)","Scheme 4 (a,...)","Scheme 2 (v1,...)","Scheme 5 (loc_1,...)","Scheme 1 (var_0,...)","meaningful word that can help understand more about the variable data","Scheme 3","Scheme 2","Scheme 4","Scheme 1","","I prefer No Reuse","","","Nil","for beginner like myself, having GUI or comment as a hint to the data will be beneficial.","Nil","8145.7","15.25","","","","","","3.99","","","","","","","","","","","","","220.59","","","","","30.01","","1460.63","","","","","","2409.26","","","","","","383.55","","","","","","1025.59","","","","","","341.79","","","","","406.9","","","","","6.35","","101.03","","278.74","","179.85","","","92.52","","115.59","","","283.15","","","134.9","","","74.99","","7.48","","573.54","","",""
"61","Master","Less","2 years","2","5","7","Yes","No","No","No","No","No","","","1","agree","agree","disagree","weakly agree","weakly agree","weakly disagree","weakly agree","weakly disagree","strongly disagree","disagree","strongly disagree","unsure","weakly agree","weakly disagree","weakly agree","disagree","weakly agree","2","2","arg_1 = 2 and arg_2 = 1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 2","Sample 1","Sample 3","if-else","This depends on the actual cases. For ranged cases, I prefer if-else. For a fixed set of cases (and an ""else"" / default case), I prefer switch.","no, the value should not be propagated","This obscures future changes in the code as well as the intention of the assigned value, e.g., in line 16, the value 6 cannot be reconstructed as var_0 + 1 but appears as a constant.","No gotos, cases are cleary distinguishable (no fall-through), return as soon as the result is known.","Goto, even worse than a fall-through.","Sample 3","Sample 1","Sample 2","if-else","Depends on the situation (ranges vs fixed numbers). Here, if-else seems to be advantageous.","one expression","","Without studying bitshifts or triple nested if statements, the purpose of the function became clear within a second.","I usually don't like nested switches. The switch head is hard to read and understand.","Sample 1","Sample 2","Sample 3","no, goto should not be used","Just do the printf and return statement there. ","copy statements to simplify the structure","If it's a single (or reasonable short) statement: copy
Otherwise: Extract as a new method?","No gotos, easy to understand, for loop without a break used which further simplifies the method.","Useless variables, too long, while(true) where not necessary.","Sample 1","Sample 2","Sample 3","while","Especially for longer loop-bodies as we see in the examples, while eases the readability. As we only talk about while(true), there is absolutely no reason for dowhile(true) imho","continue and if","Depends on how long the remaining code (after the continue) is. Continue as a ""jump"" is not always nice, but it clearly indicates that I do not have to care about the rest of the body in this iteration. When the else part only spans 3 or 4 lines, I would rate if-else as reasonable as well.","for-loops, less nesting than the other samples, one can easily follow the flow","Mix of while and do while, goto, nesting-levels","Sample 1","Sample 2","Sample 3","if(var == 0)","As we talk about an int here, I like comparison to another int better","i and j as for loop variables ease the understanding as the names clearly show their purpose.","undefined4 var_2; Many variables, while loops, typo in ""chosed""","Sample 2","Sample 3","Sample 1","for-loops","Loop behavior is much more clear. Always use for loop if you iterate over a fixed range. Even when you have to use break.","For loops, variable namings (i,j), short, easy to follow","Return type, do while, does not follow the algorithms intuition.","","limit 5","Unsure between 5 and 3, but 5 is understandable without looking at each line for a minute or counting parenthesis.","2","One more line does not hurt but eases readability.","Yes","","Yes","","No","","No","","Yes","","No","","","while-loop","More for layout than for the loop type.","char","char + decimal as comment","decimal + char as comment","decimal","As the method really works on chars and does not calculate with them, the single char is sufficient and the only relevant information for this method.","Scheme 2 (v1,...)","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","Scheme 4 (a,...)","Scheme 3 (dog,...)","dog, ... suggests a meaning of the name. Same does the usage of a,b,... (don't let that count up to i or j!). 
The other options make it clear that the name has no meaning, here I like v1, v2, ... most as they are short and do not contain (useless) underscores.

One could always include the type (or an indicator to the type), e.g. int_1 or i1, i2","Scheme 1","Scheme 2","Scheme 4","Scheme 3","p1, p2, p3...

Secretly, I like the emoji scheme most.","I prefer Reuse","Reusing variable names such as i and j is fine. If you do not stick to that naming scheme (why would'nt you?), do not reuse the name. i,j,k can be helpful for nested loops.","","Minimization of bitwise operations when operating on numbers. Better resolution of function names.","","","4902.97","82.3","","","","","","12.02","","","703.57","","","","","","","","","","","","","","","12.29","","633.13","","","","","","1185.62","","","","","","355.34","","","","","","526.6","","","","","","211.72","","","","","217.49","","","","","8.36","","122.28","","45.61","","89.51","","","82.87","","109.42","","","186.5","","","96.31","","","105.6","","10.26","","106.17","","",""
"64","Bachelor","Less","","3","1","6","Yes","Yes","No","No","No","No","","","2","","","","","","","","","","","","","","","","","","","","","","undecided","weakly disagree","agree","weakly disagree","undecided","weakly agree","undecided","weakly disagree","weakly agree","weakly disagree","weakly disagree","weakly disagree","weakly agree","undecided","undecided","agree","undecided","2","2","arg_1 = 2 and arg_2 = 1","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","","yes, the value should be propagated","","","","Sample 3","Sample 1","Sample 2","if-else","","one expression","","","","Sample 1","Sample 2","Sample 3","no, goto should not be used","","copy statements to simplify the structure","","","","Sample 2","Sample 1","Sample 3","while","","if-else","","","","Sample 1","Sample 2","Sample 3","if(!var)","","","","Sample 2","Sample 3","Sample 1","for-loops","","","","","limit 3","","2","","Yes","","Yes","","Yes","","No","","No","","No","","","while-loop","","char + decimal as comment","decimal + char as comment","char","decimal","","Scheme 1 (var_0,...)","Scheme 3 (dog,...)","Scheme 2 (v1,...)","Scheme 4 (a,...)","Scheme 5 (loc_1,...)","","Scheme 1","Scheme 4","Scheme 2","Scheme 3","","I prefer Reuse","","","","","","1289.95","19.45","","","","","","2.18","","","","","","","","342.71","","","","","","","","","","6.6","","184.82","","","","","","118.25","","","","","","131.66","","","","","","64.62","","","","","","42.15","","","","","34.5","","","","","6.61","","56.37","","38.27","","56.39","","","41.6","","35.23","","","42.29","","","20.21","","","26.66","","4.94","","14.44","","",""
"65","Master","Less","2 years","2","2","3","No","Yes","No","No","No","No","","","3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","undecided","agree","weakly disagree","agree","disagree","agree","disagree","weakly agree","undecided","weakly agree","strongly disagree","undecided","disagree","weakly agree","agree","undecided","weakly agree","2","2","arg_1 = 1 and arg_2 = 2","","","Sample 3","Sample 2","Sample 1","if-else","","no, the value should not be propagated","It depends. Best would be per default no propagation but the end user should decide","No << and directly invoking ""returns""","the return statement is only inoked in the end","Sample 3","Sample 1","Sample 2","if-else if switch has at most 2 cases and switch otherwise","","one expression","","That the format string is directly resolved instead seeing the address of the format string","the address of the format string printer and using switch case for this limeted ""cases""","Sample 1","Sample 2","Sample 3","no, goto should not be used","","copy statements to simplify the structure","for me it makes the analysing a little bit faster","format string + the simplicity","too many variables and too complicated for this kind of ""task""","Sample 1","Sample 2","Sample 3","while","","continue and if","","Using continue and that we have a for and a while loop","goto statements","Sample 2","Sample 1","Sample 3","if(var == 0)","","despite var_<n> also increment vars like i and j are used and the == 0","undefined4 and the while while nesting","Sample 2","Sample 3","Sample 1","for-loops","","no unnecessary copy of vars","copy vars for format string","","limit 10","","2","","Yes","","No","","No","","No","","No","","Yes","","","for-loop","","decimal + char as comment","char + decimal as comment","decimal","char","","Scheme 2 (v1,...)","Scheme 3 (dog,...)","Scheme 5 (loc_1,...)","Scheme 4 (a,...)","Scheme 1 (var_0,...)","","Scheme 1","Scheme 4","Scheme 2","Scheme 3","","I prefer No Reuse","","","dead code elimnation","When some magic numbers accour a hint field could help","mirai","3896.58","49.34","","","","","","7.2","","","","","","","","","","","","","1462.9","","","","","18.91","","644.83","","","","","","260.32","","","","","","197.75","","","","","","180.06","","","","","","167.71","","","","","144.14","","","","","12.19","","73.33","","43.84","","114.95","","","45.33","","61.49","","","60.11","","","55.2","","","45.8","","10.34","","240.84","","",""
"68","Bachelor","Less","","6","2","6","Yes","Yes","Yes","No","Yes","No","","","3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","undecided","disagree","weakly disagree","agree","strongly agree","strongly disagree","undecided","undecided","disagree","strongly disagree","strongly disagree","strongly disagree","strongly agree","weakly agree","disagree","strongly agree","strongly disagree","2","2","arg_1 = 2 and arg_2 = 1","dislike: too many type casts","","Sample 1","Sample 2","Sample 3","if-else","","no, the value should not be propagated","","looks clean","too many lines","Sample 3","Sample 1","Sample 2","if-else","","one expression","","short","long","Sample 1","Sample 2","Sample 3","yes, goto is a good choice","","copy statements to simplify the structure","","simple and short","too long","Sample 1","Sample 2","Sample 3","while","","if-else","","prefer having for loop","hate do-while","Sample 1","Sample 2","Sample 3","if(var == 0)","doesn't really matter, but would prefer memcmp/strcmp == 0 instead of !memcmp/strcmp","short and clean","uses while instead of for loop","Sample 2","Sample 3","Sample 1","for-loops","","short and uses for loop","hate do-whiles","","limit 10","","3","","No","","No","","No","","Yes","","No","","No","","","while-loop","","char + decimal as comment","decimal + char as comment","char","decimal","would be good if it's toggle-able","Scheme 2 (v1,...)","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","Scheme 4 (a,...)","Scheme 3 (dog,...)","","Scheme 2","Scheme 4","Scheme 1","Scheme 3","","I prefer No Reuse","","","Allow analysts to specify whether to reuse a variable or not (at the variable level, not a global setting). Sometimes reusing variable makes the decompiled cleaner but other times would make it confusing.","- Emitting memcpy/memset like what IDA Pro does for snippet of code that perform manual looping (e.g. rep stos on x86)
- provide access to decompiler options at function or even more fine-grain level rather than at a global level.
- Probably not feasible, but would be nice to allow analyst to modify decompiled code directly so that it remains semantically the same but syntactically different.","i've seen assembly code emitted by compiler that tries to align the stack to 16 bytes on every external calls, e.g.:

push eax; push eax; push address_of_str1; push address_of_str2; call strcmp

Even though strcmp only takes two argument. This can cause decompiler to show redundant arguments or worse, emitting  many redundant variables.

Would like to see how this can be effectively handled.","6589.23","31.53","","","","","","2.48","","","","","","","","","","","","","637.16","","","","","7.5","","181.7","","","","","","139.84","","","","","","69.55","","","","","","3298.9","","","","","","156.79","","","","","68.66","","","","","9.79","","89.12","","79.4","","96.46","","","55.79","","78.88","","","94.16","","","37.29","","","35.46","","8.72","","1410.05","","",""
"69","Bachelor","Less","","1","1","3","No","Yes","No","No","No","No","","","2","","","","","","","","","","","","","","","","","","","","","","undecided","undecided","disagree","agree","weakly agree","disagree","undecided","undecided","agree","weakly disagree","disagree","undecided","disagree","weakly disagree","disagree","weakly agree","weakly agree","2","I do not know","arg_1 = 2 and arg_2 = 1","","","","","","","","","","","","","","","","","","","","","","","","Sample 3","Sample 2","Sample 1","if-else","","no, the value should not be propagated","","Easiest to understand","prefer if else to switch","Sample 3","Sample 1","Sample 2","if-else","","one expression","","easiest to understand","more complicated than the other 2 samples","Sample 1","Sample 2","Sample 3","no, goto should not be used","easy to understand","copy statements to simplify the structure","","easy to understand and straightforward","long and complicated","Sample 2","Sample 1","Sample 3","while","more logical flow ","if-else","easier to understand","easiest to understand amongst the 3","do while loop","Sample 3","Sample 2","Sample 1","if(var == 0)","","","","Sample 2","Sample 1","Sample 3","for-loops","for loops are neater and shorter","","","","limit 1","least complex","2","","No","","No","","Yes","","Yes","","Yes","","No","","","while-loop","","char","char + decimal as comment","decimal + char as comment","decimal","","Scheme 1 (var_0,...)","Scheme 2 (v1,...)","Scheme 5 (loc_1,...)","Scheme 3 (dog,...)","Scheme 4 (a,...)","","Scheme 1","Scheme 2","Scheme 4","Scheme 3","","I prefer No Reuse","to have a better clarity on different for loops","","","","","12248","164.02","","","","","","13.84","","","","","","","","2179.49","","","","","","","","","","31.31","","880.09","","","","","","607.54","","","","","","879.96","","","","","","845.04","","","","","","1333.41","","","","","652.7","","","","","75.23","","161.1","","753.09","","2859.96","","","163.65","","479.82","","","47.1","","","21.56","","","49.84","","13.2","","36.01","","",""
"70","Bachelor","Less","","7","5","5","Yes","Yes","No","No","No","No","","","1","weakly agree","disagree","weakly disagree","weakly disagree","unsure","weakly disagree","unsure","disagree","disagree","agree","disagree","weakly agree","weakly disagree","agree","weakly disagree","agree","disagree","2","2","arg_1 = 2 and arg_2 = 1","Simple computations","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","Easier to analyse the control flow since we don't have to evaluate the conditions","no, the value should not be propagated","Sometimes we can understand the semantics better when it is known how values are calculated","Easy to analyse control flow since we just have to compare values with the cases in the switch ","Messy control flow due to goto instruction","Sample 2","Sample 3","Sample 1","if-else if switch has at most 2 cases and switch otherwise","","one expression","Easier to understand. If the ""else if"" is separated into two expressions, we will still annotate them as one expression during analysis.","Simple control flow","Unnecessary conditions like the nested if","Sample 1","Sample 2","Sample 3","yes, goto is a good choice","Having a goto is more intuitive to understand","copy statements to simplify the structure","Complicated branch structures are harder to trace","Easy to see when loops break or function returns","Complicated control flow","Sample 1","Sample 2","Sample 3","while","Can see the condition at once","if-else","","","","Sample 2","Sample 1","Sample 3","if(var == 0)","var==0 seems more explicit or more intuitive to understand than !var","","","Sample 2","Sample 1","Sample 3","for-loops","Can more explicitly see how conditions are calculated","","","","limit 3","","2","","No","","Yes","","Yes","","No","","No","","No","","","while-loop","For loop seems more complicated to understand when there  are long expressions involved","char","decimal","char + decimal as comment","decimal + char as comment","Would rather have a more simple view of char or decimal at one time and choose their representation manually (like in IDA)","Scheme 1 (var_0,...)","Scheme 2 (v1,...)","Scheme 5 (loc_1,...)","Scheme 4 (a,...)","Scheme 3 (dog,...)","","Scheme 4","Scheme 2","Scheme 1","Scheme 3","","I prefer Reuse","","","","","","2635.89","57.06","","","","","","5.03","","","926.64","","","","","","","","","","","","","","","5.93","","231.76","","","","","","258.78","","","","","","294.71","","","","","","227.61","","","","","","136.91","","","","","94.86","","","","","5.62","","58.12","","18.66","","66.08","","","43.95","","114.1","","","29.6","","","21.7","","","11.63","","4.25","","22.89","","",""
"75","Bachelor","Less","2 years","7","6","8","No","Yes","Yes","No","No","No","","","3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","undecided","agree","strongly disagree","agree","weakly agree","agree","weakly agree","weakly disagree","disagree","agree","strongly disagree","weakly agree","disagree","agree","disagree","strongly disagree","agree","2","I do not know","arg_1 = 1 and arg_2 = 2","","","Sample 2","Sample 1","Sample 3","if-else","","yes, the value should be propagated","","easy to read, but ties with switch (sample 1)","goto","Sample 3","Sample 1","Sample 2","if-else","","one expression","","straight forward inequality checks","insane switch statements","Sample 1","Sample 2","Sample 3","no, goto should not be used","i don't write C using goto, therefore it should not be used in decompilation","copy statements to simplify the structure","","looks clean","looks bloated","Sample 1","Sample 2","Sample 3","while","","continue and if","hard choice, but continue seems a bit easier to read","for loop","goto","Sample 2","Sample 1","Sample 3","if(var == 0)","","variable naming looks clean and it has for loops","while (var_3 = 0, var_5 < var_0) ","Sample 2","Sample 3","Sample 1","for-loops","","two clean looking for loops and division check in if condition","do while loop","","limit 3","seems like a sensible tradeoff between number of assingments and their complexity","2","","No","","Yes","","Yes","","No","","No","","No","","","while-loop","I prefer easy to read conditions","char","decimal","decimal + char as comment","char + decimal as comment","","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","Scheme 2 (v1,...)","Scheme 4 (a,...)","Scheme 3 (dog,...)","","Scheme 4","Scheme 1","Scheme 2","Scheme 3","","I prefer Reuse","not a strong preference but reuse helps with scope","","","","","6129.64","55.74","","","","","","16.98","","","","","","","","","","","","","2621.26","","","","","13.21","","581.46","","","","","","301.62","","","","","","222.2","","","","","","254.36","","","","","","373.91","","","","","560.33","","","","","12.66","","180.24","","269.65","","118.49","","","51.57","","130.89","","","112.27","","","60.16","","","141.97","","13.09","","37.58","","",""
"77","Bachelor","Less","","4","6","5","Yes","No","No","No","No","No","","","2","","","","","","","","","","","","","","","","","","","","","","undecided","weakly disagree","weakly agree","weakly disagree","weakly agree","weakly disagree","weakly agree","weakly disagree","weakly disagree","weakly disagree","weakly disagree","weakly agree","undecided","weakly agree","weakly agree","weakly disagree","weakly disagree","2","1","arg_1 = 2 and arg_2 = 1","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 3","Sample 2","switch","","yes, the value should be propagated","","clear presentation of codes","too many nested statements","Sample 3","Sample 2","Sample 1","if-else if switch has at most 2 cases and switch otherwise","","separated expressions","","concise way of presentation","","Sample 2","Sample 1","Sample 3","yes, goto is a good choice","","copy statements to simplify the structure","","","","Sample 2","Sample 1","Sample 3","while","","if-else","","involves less conditional statements","","Sample 2","Sample 1","Sample 3","if(var == 0)","","","","Sample 2","Sample 3","Sample 1","for-loops","","clear understanding of the codes","has several different conditional statements which may require longer time to understand the codes","","limit 10","","3","","Yes","","No","","Yes","","No","","Yes","","No","","","while-loop","","char + decimal as comment","char","decimal + char as comment","decimal","","Scheme 4 (a,...)","Scheme 1 (var_0,...)","Scheme 2 (v1,...)","Scheme 3 (dog,...)","Scheme 5 (loc_1,...)","","Scheme 2","Scheme 4","Scheme 1","Scheme 3","","I prefer No Reuse","","","the decompile string results and the possible values presented in the codes","having a GUI presentation","calling functions within another functions","2093.55","14.29","","","","","","1.6","","","","","","","","800.84","","","","","","","","","","3.32","","92.76","","","","","","85.94","","","","","","174.85","","","","","","84.74","","","","","","41.8","","","","","112.79","","","","","3.53","","74.67","","77.21","","137.16","","","53.61","","78.17","","","37.73","","","29.45","","","22.62","","7.99","","158.48","","",""
"78","Bachelor","Less","","1","1","5","No","No","No","No","No","No","nil","","1","unsure","unsure","disagree","agree","strongly agree","strongly disagree","unsure","unsure","disagree","weakly disagree","strongly disagree","weakly disagree","strongly agree","unsure","unsure","weakly agree","weakly disagree","2","2","arg_1 = 2 and arg_2 = 1","no comments","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","","yes, the value should be propagated","","Fewer condition checking and code is easy to follow","Code is hardest to follow","Sample 3","Sample 1","Sample 2","if-else","","one expression","","Easy to follow and conditional checks were easy to understand","Complex conditional check","Sample 1","Sample 2","Sample 3","no, goto should not be used","prefer using break","copy statements to simplify the structure","easier to understand the code","Least number of lines and easy to understand","To many variables and longest of among the 3","Sample 2","Sample 1","Sample 3","while","","if-else","","Easiest to follow and I did not have to deal with pointers","Most difficult to follow","Sample 1","Sample 3","Sample 2","if(var == 0)","","Easiest to follow","Hardest to follow and pointers","Sample 2","Sample 1","Sample 3","for-loops","","Easiest to follow and had the fewest line of code","Hardest to follow","","limit 5","","2","","Yes","","No","","Yes","","Yes","","No","","No","","","while-loop","","char","char + decimal as comment","decimal","decimal + char as comment","","Scheme 3 (dog,...)","Scheme 5 (loc_1,...)","Scheme 1 (var_0,...)","Scheme 2 (v1,...)","Scheme 4 (a,...)","","Scheme 1","Scheme 4","Scheme 2","Scheme 3","","I prefer Reuse","","","Remove unused variables, dead branches, unused branches","Function tracing","nil","10198.6","34.64","","","","","","4.35","","","6613.91","","","","","","","","","","","","","","","3.1","","724.38","","","","","","199.95","","","","","","552.39","","","","","","228.42","","","","","","150.04","","","","","187.09","","","","","4","","95.22","","18.66","","62.21","","","58.28","","249.2","","","31.04","","","578.07","","","160.93","","3.33","","239.34","","",""
"79","Bachelor","Less",">5 years","8","8","7","Yes","No","No","No","No","No","","","2","","","","","","","","","","","","","","","","","","","","","","undecided","undecided","weakly agree","undecided","undecided","undecided","undecided","undecided","undecided","agree","weakly disagree","undecided","undecided","undecided","undecided","undecided","undecided","3","3","arg_1 = 1 and arg_2 = 2","Recursive calls","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","","no, the value should not be propagated","","Easier to understand","labels","Sample 2","Sample 1","Sample 3","switch","","one expression","","Easier to understand","multiple if","Sample 1","Sample 2","Sample 3","yes, goto is a good choice","","copy statements to simplify the structure","","short","long lines of code","Sample 1","Sample 2","Sample 3","while","","if-else","","short","long lines of code","Sample 1","Sample 2","Sample 3","if(var == 0)","","short","long lines of code","Sample 3","Sample 2","Sample 1","for-loops","","","","","limit 1","","2","","Yes","","Yes","","No","","No","","No","","No","","","while-loop","","char + decimal as comment","char","decimal + char as comment","decimal","","Scheme 4 (a,...)","Scheme 2 (v1,...)","Scheme 1 (var_0,...)","Scheme 3 (dog,...)","Scheme 5 (loc_1,...)","","Scheme 2","Scheme 4","Scheme 1","Scheme 3","","I prefer No Reuse","","","Structures.","","","2095.08","70.84","","","","","","19.25","","","","","","","","810.14","","","","","","","","","","5.26","","152.54","","","","","","82.13","","","","","","167.52","","","","","","188.9","","","","","","75.94","","","","","34.55","","","","","16.99","","36.33","","23.64","","44.56","","","21.82","","81.53","","","70.89","","","52.03","","","15.98","","3.8","","120.44","","",""
"80","School Graduation","Less","","2","2","1","Yes","No","No","No","No","No","","","1","strongly disagree","strongly agree","agree","strongly agree","agree","strongly agree","unsure","unsure","weakly agree","unsure","disagree","agree","agree","disagree","agree","strongly disagree","weakly agree","I do not know","I do not know","arg_1 = 1 and arg_2 = 2","Too many if statement. Not easy to understand what the code trying to do","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 3","Sample 2","switch","Switch is easier to understand and follow the program flow.","yes, the value should be propagated","","Using case easy to follow and understand especially when the code is long","The use of ""!="" can mean there are a lot of possibilities in the variable as compared to the use of ""=="" ","Sample 3","Sample 1","Sample 2","switch","If-else is also good if there are not too many if-else inside a if-else","one expression","","Short and clear","The use of hex number and & operation is more difficult to understand","Sample 1","Sample 2","Sample 3","no, goto should not be used","Prefer break than goto statement","never copy a statement","Too many return statement complicate the code ","Short and clear","Too many variable and operation and the use of !=","Sample 2","Sample 1","Sample 3","while","","if-else","","While and if is easier to understand compared to for followed by while or do (while true)","too many combination, do while true , goto and break","Sample 2","Sample 1","Sample 3","if(var == 0)","","simple variable","mixture of while and if-else","Sample 2","Sample 3","Sample 1","for-loops","","short and easy to understand code structure","Mixture of do, while and if-else make it hard to understand and trace","","limit 10","","3","","No","","No","","Yes","","Yes","","Yes","","No","","","while-loop","while-loop for this code easier to understand compared to the for-loop","char","decimal","char + decimal as comment","decimal + char as comment","Char make more sense than decimal for code
the comment make the code hard to read (prefer mouse over to get the comments or comments at the end of line)","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","Scheme 2 (v1,...)","Scheme 4 (a,...)","Scheme 3 (dog,...)","","Scheme 4","Scheme 1","Scheme 2","Scheme 3","","I prefer Reuse","","","For strings, able to recognize /suggests the language use via the type of character used as string and their appearance frequency 
Able to import signature to recognized more function
","Graph representation of the flow of code.
Built in ""Help"" menu and suggestions if user hit a problem","","7566.33","31.3","","","","","","7.97","","","1806.48","","","","","","","","","","","","","","","22.73","","915.25","","","","","","817.48","","","","","","600.26","","","","","","496.86","","","","","","393.18","","","","","313.82","","","","","15.72","","505.73","","226.45","","95.15","","","185.98","","223.17","","","98.07","","","108.67","","","45.78","","13.82","","642.46","","",""
"81","Bachelor","Less",">5 years","5","7","8","Yes","No","No","No","No","No","ida","","1","strongly agree","disagree","agree","weakly disagree","disagree","weakly agree","agree","disagree","disagree","weakly agree","strongly disagree","disagree","weakly agree","agree","weakly agree","agree","weakly disagree","2","2","arg_1 = 2 and arg_2 = 1","types are not normalized in stmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 3","Sample 2","switch","no real pref., although switch is more readable","yes, the value should be propagated","","clear conditions to determine var0 ","","Sample 3","Sample 1","Sample 2","if-else","if conditions are simple switch conditions, switch is alright, however if conditions are complex, i am more used to ""parsing"" if-else structure as you will need to mentally interpret the switch as if-else.","separated expressions","visually easier to determine if-else block","short and neat, making analysing conditions easy","if all the 3 samples are the same, unnecessary opertions","Sample 1","Sample 2","Sample 3","yes, goto is a good choice","if the goto does not lead to another jump, goto is easier to read","copy statements to simplify the structure","","short and easier to read loops","unnecessary complexity, can be made simplier","Sample 2","Sample 1","Sample 3","while","no actual pref. just that if there is a nested while or nested dowhile, it has to be the same (ie, all loops using dowhile or all loops using while)","if-else","it is easier to follow an if-else block, as the continue-if condition introduces another mental note of a condition","structurally easier to visualise the code","mixture of dowhile and while","Sample 1","Sample 2","Sample 3","if(var == 0)","condition is simpler to understand","for loops and conditions are clear","unnecessary complexity; undefined?","Sample 2","Sample 3","Sample 1","for-loops","easier to visualise the condition","no while loops","mix of dowihle and while","","limit 10","fewer variables to track","3","less repetitive expressions","No","","No","","No","","Yes","second choice. although duplicate, still easy to read","Yes","first choice. no duplicate expressions","Yes","3rd choice. don't like to for loop condition","as above","while-loop","prefer the conditions for the loop to be simple","char + decimal as comment","decimal + char as comment","char","decimal","humans prefer reading what the condition means, but essential to know the decimal value","Scheme 4 (a,...)","Scheme 1 (var_0,...)","Scheme 2 (v1,...)","Scheme 5 (loc_1,...)","Scheme 3 (dog,...)","allow user to rename var name","Scheme 4","Scheme 1","Scheme 2","Scheme 3","allow user to rename var name","I prefer No Reuse","clearer for analysis ","","to be able to distinguish unicode and ascii through visual emphasis rather than printing out the ""raw char/bytes"" ","allow the user to toggle between the various decompiler parameters that will give rise to the different level of decompiling optimisation to suit the user's feel as different type of codes may be presented better using different params","nil","17037.4","54.8","","","","","","12.35","","","13300.3","","","","","","","","","","","","","","","14.13","","620.77","","","","","","671.8","","","","","","360.09","","","","","","356.34","","","","","","165.55","","","","","82.54","","","","","8.17","","500.92","","140.8","","190.95","","","44.96","","103.1","","","83.77","","","32.16","","","46.46","","8.13","","239.3","","",""
"82","Bachelor","Less","","4","1","5","Yes","Yes","No","No","No","No","","","1","weakly agree","weakly disagree","weakly agree","disagree","weakly agree","weakly disagree","unsure","weakly disagree","disagree","unsure","disagree","weakly disagree","weakly disagree","weakly disagree","weakly agree","unsure","weakly agree","2","2","arg_1 = 1 and arg_2 = 2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 2","Sample 3","Sample 1","if-else","","yes, the value should be propagated","","Easy to read","Harder to read","Sample 3","Sample 1","Sample 2","if-else","","one expression","","Easier to read.","Can be confusing at times.","Sample 1","Sample 2","Sample 3","no, goto should not be used","","copy statements to simplify the structure","","It copied the return statements so it is easier to understand.","Nested while loops","Sample 1","Sample 2","Sample 3","while","","if-else","","Easier to follow the flow.","","Sample 1","Sample 2","Sample 3","if(var == 0)","","","","Sample 2","Sample 3","Sample 1","for-loops","","","","","limit 1","","2","","Yes","","Yes","","Yes","","No","","No","","No","","","for-loop","","decimal + char as comment","char + decimal as comment","decimal","char","","Scheme 4 (a,...)","Scheme 2 (v1,...)","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","Scheme 3 (dog,...)","","Scheme 1","Scheme 3","Scheme 2","Scheme 4","","I prefer No Reuse","","","","","","1800.31","36.51","","","","","","5.23","","","501.82","","","","","","","","","","","","","","","4.85","","59.96","","","","","","60.58","","","","","","78.36","","","","","","788.79","","","","","","39.99","","","","","26.06","","","","","2.11","","27.73","","35.01","","31.99","","","8.23","","27.43","","","20.89","","","11.59","","","10.89","","2.97","","19.32","","",""
"83","PhD","Less","","6","1","9","Yes","No","No","No","No","No","","","3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","weakly agree","weakly disagree","disagree","agree","undecided","weakly disagree","undecided","undecided","weakly agree","weakly disagree","weakly disagree","disagree","agree","weakly agree","undecided","weakly agree","disagree","2","0","arg_1 = 2 and arg_2 = 1","","","Sample 1","Sample 2","Sample 3","switch","","yes, the value should be propagated","","neat","messy","Sample 3","Sample 1","Sample 2","if-else if switch has at most 2 cases and switch otherwise","Actually, if there is a 4th choice where there are only 2 cases, but the switch condition is complex but actually only evaluates to either true or false (like in sample 2), then if-else is better.","one expression","even better if can reduce from ""if(A) {} else if(!A) {}"" 
to simply ""if(A) {} else {}""","less nested-if; no redundant nested-if with same condition","switch statement makes it not obvious only 2 cases possible i.e. it is an ""if-else""","Sample 3","Sample 1","Sample 2","no, goto should not be used","","copy statements to simplify the structure","","simplest structure among three.
even better if can use break","complex","Sample 2","Sample 1","Sample 3","while","","continue and if","","","","Sample 2","Sample 3","Sample 1","if(var == 0)","","","","Sample 2","Sample 3","Sample 1","for-loops","","","","","limit 5","","3","","No","","Yes","","Yes","","No","","No","","No","","","while-loop","","char","char + decimal as comment","decimal + char as comment","decimal","","Scheme 1 (var_0,...)","Scheme 2 (v1,...)","Scheme 5 (loc_1,...)","Scheme 4 (a,...)","Scheme 3 (dog,...)","","Scheme 2","Scheme 4","Scheme 1","Scheme 3","","I prefer Reuse","Reason: if No Reuse, I have to look carefully to know values of variable i from first loop is not used again. If Reuse, it is obvious.","","","","","4473.95","97.52","","","","","","18.2","","","","","","","","","","","","","1015.13","","","","","15.84","","349.2","","","","","","993.52","","","","","","192.04","","","","","","325.37","","","","","","213.66","","","","","81.27","","","","","15.77","","357.24","","141.11","","129.99","","","81.15","","91.37","","","82.7","","","44.26","","","151.45","","13.11","","64.05","","",""
"84","Bachelor","Less","","2","1","6","No","Yes","No","No","No","No","","","2","","","","","","","","","","","","","","","","","","","","","","weakly disagree","weakly agree","disagree","weakly agree","weakly disagree","weakly disagree","weakly disagree","undecided","weakly disagree","weakly agree","weakly disagree","weakly disagree","weakly disagree","weakly disagree","undecided","weakly disagree","undecided","3","2","arg_1 = 2 and arg_2 = 1","","","","","","","","","","","","","","","","","","","","","","","","Sample 2","Sample 1","Sample 3","if-else","","yes, the value should be propagated","","","","Sample 3","Sample 1","Sample 2","if-else if switch has at most 2 cases and switch otherwise","","one expression","","","","Sample 1","Sample 2","Sample 3","no, goto should not be used","","copy statements to simplify the structure","","","","Sample 2","Sample 1","Sample 3","while","","if-else","","","","Sample 1","Sample 2","Sample 3","if(var == 0)","","","","Sample 2","Sample 1","Sample 3","for-loops","","","","","limit 5","","4","","No","","No","","Yes","Less var","No","","No","","No","","","for-loop","","decimal + char as comment","char","char + decimal as comment","decimal","","Scheme 2 (v1,...)","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","Scheme 4 (a,...)","Scheme 3 (dog,...)","","Scheme 1","Scheme 2","Scheme 4","Scheme 3","","I prefer Reuse","","","","","","1432.98","35.94","","","","","","5.49","","","","","","","","663.79","","","","","","","","","","6.19","","154.52","","","","","","57.7","","","","","","68.89","","","","","","34.98","","","","","","35.23","","","","","44.52","","","","","3.68","","58.62","","29.43","","82.32","","","19.04","","62.36","","","27.51","","","28.96","","","7","","3.44","","3.37","","",""
"89","Bachelor","Less","","5","1","3","Yes","Yes","No","No","No","No","","","2","","","","","","","","","","","","","","","","","","","","","","weakly agree","weakly agree","weakly agree","undecided","undecided","disagree","weakly agree","weakly disagree","weakly disagree","weakly disagree","disagree","disagree","weakly disagree","weakly agree","weakly disagree","weakly disagree","weakly disagree","2","2","arg_1 = 1 and arg_2 = 2","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","","yes, the value should be propagated","","Cleaner & easier to understand","goto label could potentially create some confusion in a bigger sample","Sample 3","Sample 1","Sample 2","if-else","","one expression","One expression makes it cleaner, easier to encapsulate the logic","Clean and directly easy to see the control flow & conditions","Bitshifts will occur more mental effort to reverse and understand the same thing","Sample 2","Sample 1","Sample 3","yes, goto is a good choice","","never copy a statement","Depends, copying could make it simplified in larger functions","Easy to see control flow","Too many branches & conditions","Sample 2","Sample 1","Sample 3","while","","if-else","","","","Sample 1","Sample 2","Sample 3","if(var == 0)","","","","Sample 2","Sample 1","Sample 3","for-loops","","","","","limit 7","","2","","No","","No","","Yes","","Yes","","No","","No","","","while-loop","","decimal + char as comment","char","char + decimal as comment","decimal","Could be unicode and i might not want it to display as ascii printable char at first. Would prefer decimal + char as comment","Scheme 2 (v1,...)","Scheme 1 (var_0,...)","Scheme 4 (a,...)","Scheme 3 (dog,...)","Scheme 5 (loc_1,...)","","Scheme 4","Scheme 2","Scheme 1","Scheme 3","","I prefer No Reuse","","","","","","2257.99","22.42","","","","","","1.77","","","","","","","","110.72","","","","","","","","","","6.33","","190.98","","","","","","257.42","","","","","","268.64","","","","","","532.26","","","","","","90","","","","","166.68","","","","","9.48","","159.19","","46.65","","78.38","","","40.19","","105.58","","","59.94","","","32.44","","","26","","3.94","","48.98","","",""
"93","Master","Weekly",">5 years","8","7","10","Yes","No","No","No","No","No","","","1","agree","strongly agree","disagree","agree","strongly agree","strongly disagree","agree","strongly agree","weakly agree","weakly agree","strongly disagree","disagree","agree","weakly disagree","weakly agree","weakly agree","weakly disagree","2","2","arg_1 = 2 and arg_2 = 1","1.) this is clearly obfuscation and written to make it most hard for the reader/reverser in all aspects!

2.) Also, the *author* might *not* have considered that this code would produce quite different result on different OS, such as Windows, to name an important OS. ;-)
On Windows, an signed/unsigned int == 64 bit, on a 64 bit OS. Thus, it would NOT lead to overflow with 1 + 0xffffffff. 
We did assume a Linux system here, where a signed/unsigned int == 32 bit register size, leading to overflow with 1 + 0xffffffff.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","depends on complexity. if-else for simple ones, please.","yes, the value should be propagated","","the complete switch-case.","lengthy unreadable code","Sample 3","Sample 2","Sample 1","switch","","one expression","","nice & short please","lengthy and harcoded numbers when unneeded","Sample 1","Sample 2","Sample 3","yes, goto is a good choice","goto is bad, but still better then lengthy code!","never copy a statement","don't do that if you can avoid it.","nice & short, no gotos.","too lengthy.","Sample 1","Sample 2","Sample 3","while","definitely while","continue and if","","better structuring, a bit shorter and nicer.","they were all relative bad, 2 & 3.","Sample 1","Sample 2","Sample 3","if(!var)","in general (!var). but that really doesn't make a big difference.","a bit better structured than the others. ","undefined type is a no go.","Sample 2","Sample 3","Sample 1","for-loops","for-loops, maybe. not a big difference. I probably don't care much.","nice & short, even nice variable names, that's unusual, and much better than the other two,","lengthy, ugly.","","limit 10","ugh, but still limit 10 makes the overview better I think.","3","","No","","No","","No","","No","","No","","Yes","","all bad","for-loop","","decimal + char as comment","char + decimal as comment","decimal","char","please hexadecimal instead of decimal. Who needs decimal anyway?","Scheme 2 (v1,...)","Scheme 1 (var_0,...)","Scheme 4 (a,...)","Scheme 5 (loc_1,...)","Scheme 3 (dog,...)","","Scheme 4","Scheme 1","Scheme 2","Scheme 3","I cannot even read scheme 3, it's rectangles only.","I prefer No Reuse","That is not about my preference. Do how it was written in the code. If the author did reuse it, I want reuse. Other, no.","","Resolving API calls correctly is very very very important. Any decompiler not able to resolve ordinal API calls or any API call is useless.
Resolve API calls always. 
Correctly resolving types is also very important.
It would be cool if there was struct support, e.g., you can load in custom header files with typedefs, and apply them on your own to variables, and use their fields andsoon.","It would be cool if there was struct support, e.g., you can load in custom header files with typedefs, and apply them on your own to variables, and use their fields andsoon.","nope","2495.68","17.06","","","","","","2.53","","","379.02","","","","","","","","","","","","","","","8.75","","172.78","","","","","","142.73","","","","","","210.73","","","","","","126.63","","","","","","96.5","","","","","171.43","","","","","3.87","","49.27","","594.32","","93.03","","","20.71","","52.9","","","58.45","","","36.32","","","84.32","","5.04","","169.29","","",""
"94","Bachelor","Less","","1","1","4","No","No","No","No","No","No","none","","1","disagree","agree","strongly disagree","strongly agree","weakly disagree","weakly disagree","disagree","agree","agree","agree","strongly disagree","strongly agree","strongly disagree","weakly disagree","unsure","strongly disagree","weakly agree","2","2","arg_1 = 2 and arg_2 = 1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","","yes, the value should be propagated","","clear structure","goto and labels","Sample 3","Sample 1","Sample 2","if-else if switch has at most 2 cases and switch otherwise","","one expression","","if-else was easy to follow","switch in switch is confusing","Sample 1","Sample 2","Sample 3","yes, goto is a good choice","","copy statements to simplify the structure","","short and readable","confusing structure","Sample 1","Sample 2","Sample 3","while","","continue and if","","","goto","Sample 2","Sample 3","Sample 1","if(var == 0)","","good and easy variable names","","Sample 2","Sample 3","Sample 1","for-loops","","short and clear","do{}","","limit 5","","2","","No","","Yes","","Yes","","No","","No","","No","","","while-loop","","char + decimal as comment","decimal + char as comment","char","decimal","","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","Scheme 2 (v1,...)","Scheme 4 (a,...)","Scheme 3 (dog,...)","","Scheme 2","Scheme 4","Scheme 1","Scheme 3","","I prefer Reuse","","","","","","5659.34","88.15","","","","","","21.13","","","3330.87","","","","","","","","","","","","","","","31.34","","299.03","","","","","","243.29","","","","","","267.76","","","","","","365.96","","","","","","277.19","","","","","93.06","","","","","14.7","","126.09","","71.25","","90.25","","","33.22","","96.79","","","64.2","","","46.45","","","22.34","","17.52","","58.75","","",""
"95","Master","Less","","3","2","4","Yes","No","No","No","No","No","","","2","","","","","","","","","","","","","","","","","","","","","","undecided","undecided","disagree","agree","agree","disagree","agree","weakly disagree","disagree","disagree","disagree","disagree","weakly agree","agree","weakly disagree","agree","disagree","2","2","arg_1 = 2 and arg_2 = 1","Like : It compiles, and therefore is easier to test dynamically for programmers. Doesn't use go-tos. Seems to be no dead code.
Dislike : It is still hard to decipher what the function is attempting to compute.","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","","yes, the value should be propagated","","There were no lines where more than one condition had to be kept in mind. ","The use of go-tos.","Sample 3","Sample 1","Sample 2","if-else","","one expression","","Seems closest to human-written source-code","Use of casting and bit-level operations.","Sample 1","Sample 2","Sample 3","no, goto should not be used","In this case there was only one goto and it acted like a finally block, and so was easy enough to understand and did help in some ways, too. Where you begin to have multiple gotos and that don't necessarily return, it may become harder to understand. I think the analyst can get used to the goto construct eventually, and it does help with reducing code repetition in some cases, but it adds to the learning curve as it's not something normally used by those coming from a programming background.","copy statements to simplify the structure","Again, this more similar to how a programmer would do it, I think.","It looked closest to something I'd program.","It seemed most complex.","Sample 2","Sample 1","Sample 3","while","","if-else","","The loop constructs were simplest.","Use of goto to jump to part of an outer loop","Sample 1","Sample 2","Sample 3","if(!var)","In this case it looks like it is meant to be a boolean, so !var makes sense.","Seemed to recover semantics best, e.g. boolean in line 21 and arithemetic in line 23","While loops used instead of for loops.","Sample 2","Sample 3","Sample 1","for-loops","When it actually makes sense (not e.g. for(<blank>; condition ;<blank>) )","It was most concise and the functionality was easy to figure out.","It used do-while loops and while loop where a for loop would have been more appropriate.","","limit 7","","2","","No","","No","","No","","Yes","","Yes","","No","","In selected samples, it was easiest to identify key state variables and how they were changed across iterations. Sub-expression computations were not repeated unnecessarily, as in sample 6.","while-loop","Prefer for key computation to be kept in the loop body rather than header.","char + decimal as comment","decimal + char as comment","char","decimal","","Scheme 2 (v1,...)","Scheme 5 (loc_1,...)","Scheme 1 (var_0,...)","Scheme 3 (dog,...)","Scheme 4 (a,...)","","Scheme 2","Scheme 4","Scheme 1","Scheme 3","","I prefer No Reuse","","","","Synchronizing with disassembly view, mouse-over for corresponding register/mem-slot, variable re-naming, copy-paste, concrete and symbolic execution, multiple decompilation candidates.","","25244.1","104.17","","","","","","11.51","","","","","","","","13262.2","","","","","","","","","","5.82","","1522.53","","","","","","1662.92","","","","","","4017.3","","","","","","67.75","","","","","","509.31","","","","","1623.24","","","","","3.35","","536.49","","463.27","","686.62","","","118.43","","148.29","","","69.9","","","73.07","","","51.3","","2.76","","303.85","","",""
"96","Master","Weekly",">5 years","10","10","4","Yes","Yes","No","No","Yes","No","","","2","","","","","","","","","","","","","","","","","","","","","","weakly disagree","weakly agree","weakly agree","weakly agree","strongly agree","strongly disagree","weakly agree","disagree","weakly disagree","disagree","strongly disagree","disagree","agree","undecided","strongly disagree","weakly agree","disagree","2","2","arg_1 = 1 and arg_2 = 2","from my observations, recursion appears rarely in real-world code.","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 3","Sample 2","switch","in the given example, switch is more straight forward to read (even with the fall-through).","yes, the value should be propagated","","the switch allows to read the code more or less linearly without the need to potentially re-read above conditions again.","the negative condition in the first if feels less natural than in the other one (sample 3).","Sample 3","Sample 1","Sample 2","if-else","for comparison of value ranges (<0, 0, >0), opposite to explicit values like in the previous example, switch feels less natural and harder to comprehend (bitmask/shift magic is also harder to understand for beginners).","one expression","","among the nesting depth of the given examples and concise logical split of value ranges captured by the ifs","bitmask/shift magic requires more intrinsic knowledge about number representation than straightforward if/else constructs.","Sample 1","Sample 2","Sample 3","no, goto should not be used","It feels like the redundancy of the ""return printf()"" does not hurt here. Because it's the last statement within the loop(s), it allows directly to ""stop"" trying to understand the context.","copy statements to simplify the structure","yes, see above.","linear readability.","cluttered, too many variables compared to the others.","Sample 2","Sample 1","Sample 3","while","while shows the condition under which execution happens, do-while appears to require an additional if to branch out in case the condition is violated -> feels a bit cluttered.","if-else","in this example, if-else felt like it achieves better logical segmentation of the while's body.","inc/dec operators.","compared to the other two, it's harder to follow what is happening why (loops, conditions)","Sample 2","Sample 1","Sample 3","if(var == 0)","","""cleanest"" for loops","I think for loops are easier to read than while loops.","Sample 2","Sample 3","Sample 1","for-loops","conditions in the for loops at beginning of their body makes it easy to understand how they'll work (even with the break).","clean and straight forward","not a fan of the do-while like in the examples before","","limit 5","I think I like middleground (limit 5) best. 
What would be great though: To be able to decide this on a case-by-case, e.g. by having this available as a parameter in a UI.","2","2 feels easiest to follow. 
But again, might be great to have such things available as a parameter.","Yes","","Yes","","No","","No","","No","","No","","shorter lines might be easier to understand, allow to rename/comment more finely.","while-loop","while loop feels more appropriate because the loop body / loop variable update looks non-trivial (compared to increments etc).","decimal","char","decimal + char as comment","char + decimal as comment","first choice should be concise (either dec or char), comments maybe as an optionally feature (via button).","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","Scheme 2 (v1,...)","Scheme 4 (a,...)","Scheme 3 (dog,...)","var_<n> and loc_<n> might actually be easier to click since it's 5+ chars. 
""v1"", and ""a"" make the output more concise; using non-numbered variable (a, ...) may run out of symbols for huge functions.","Scheme 4","Scheme 1","Scheme 2","Scheme 3","same reasons as before","I prefer No Reuse","","","resolution of stack and xmm-based string definitions.
","as mentioned earlier, options to control the aggressiveness of optimization/de-optimization might allow an analyst to find a configuration best suited for a given function on a case-by-case basis.","since it's an absolute classic you could go for variants of RC4 implementations.
re-using some of the functions/code from the DREAM survey could be interesting to see how things evolved since then.","6561.73","57.79","","","","","","8.77","","","","","","","","1574.71","","","","","","","","","","12.29","","367.01","","","","","","775.53","","","","","","399.4","","","","","","730.66","","","","","","387.15","","","","","213.03","","","","","11.28","","386.13","","112.58","","213.15","","","170.23","","655","","","176.39","","","42.73","","","49.74","","11.91","","206.25","","",""
"97","Bachelor","Monthly","","3","2","4","Yes","Yes","No","No","No","No","","","1","weakly disagree","weakly disagree","unsure","weakly disagree","disagree","agree","unsure","unsure","disagree","weakly disagree","disagree","weakly agree","disagree","weakly agree","agree","disagree","weakly disagree","2","2","arg_1 = 2 and arg_2 = 1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","Dependent on the variable-type and if ranges are involved in the cases.","yes, the value should be propagated","","More instantaneous overview of the cases for which additional instructions will be applied.","Too many if-indent-blocks, the goto instruction; it made the overall control-flow less obvious.","Sample 3","Sample 1","Sample 2","if-else","I tend to prefer if-else for ranges, except if the boundaries are few, e.g., 2, and the switch can be well-adapted to these boundaries.","one expression","Separated solely if it makes sense to include multiple separations again, e.g., by separating the positive case into <=5 and > 5.","Less unnecessary instructions.","Outer switch instructions feels unnecessary complicated to read.","Sample 1","Sample 2","Sample 3","no, goto should not be used","Goto is fine if there are at most two different labels to jump to and if the switch-body is of small-ish size (probably <= 15 lines).","copy statements to simplify the structure","Copy statements if restructuring/ rewriting them together afterwards is mostly easily possible.","Conciseness, by far most obvious control flow & semantics.","Way too many unnecessary case-changes, variables; didn't use common counter-variable names, as the 'i' in sample 1. I much prefer the x += y statement over x = x + y. Too many breaks in combination with the 'true' while-condition.","Sample 1","Sample 2","Sample 3","while","Exceptions are cases for which only one (possibly longer) break-condition exists that can be nicely caught before the main while-body.
In case loops are nested, I strongly prefer while over do-while.","if-else","If the if-condition and body is short, while the else is long (and the corresponding negated if-condition would be worse to read), continue+if can be better.","Clearer control-flow, especially in regards to which & how many variables that are part of a control-flow-condition are changed inside the body. ","long, nested do-while loops and the label being defined inside the while loop","Sample 2","Sample 1","Sample 3","if(!var)","Assuming that the knowledge of var being int-castable is found nearby/ easily remembered","for loop with ++ statements, no totally-unused variables","The x = x+y statements, especially since they are just incremented in such a manner much faster understood by a for-loop.","Sample 2","Sample 1","Sample 3","for-loops","In case the loop-condition variables are changed in more complex ways, a while-loop with a clear break-condition is better.","Very clear loop-behaviour from the first look on it.","Combined use of var_3 as incrementing condition-variable and setting it as ""return"" value combined with break (l. 16)","","limit 3","","2","","No","","No","","Yes","The var_4 use allows a easier differentiation between condition-variables and the rest.","Yes","","Yes","","No","","","while-loop","Because the i = (...) statement in the for-loop is so long, a horizontal deviation as seen in the while-loop feels easier and clutters less with the long statements from the lines above.","char + decimal as comment","char","decimal + char as comment","decimal","The range-tests for characters (line 9) would be great as an individual if at the start.","Scheme 4 (a,...)","Scheme 2 (v1,...)","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","Scheme 3 (dog,...)","In *some* cases with few variables, names such as 'tmp' can be okay, although not nice either. In case the variable is used as a counter/ incrementer/ decrementer, change it to a common counter-name, such as 'i', etc. .","Scheme 1","Scheme 4","Scheme 2","Scheme 3","","I prefer Reuse","Reuse if the first loop-body is not too long.","","","Automatically added comments regarding additional parameter-information (as to, in which range they should be) when extracting a method.
If in doubt, whether a variable is used as character to int, add the character as comment.","","7016.52","112.1","","","","","","17.46","","","884.29","","","","","","","","","","","","","","","43.56","","441.59","","","","","","876.94","","","","","","684.6","","","","","","888.86","","","","","","445.69","","","","","503.72","","","","","9.75","","160.13","","178.83","","447.69","","","87.03","","305.1","","","199.1","","","52.15","","","72.93","","8.04","","596.96","","",""
"103","Bachelor","Less","3 years","5","7","6","Yes","Yes","No","No","No","No","","","1","unsure","weakly agree","weakly disagree","weakly agree","weakly agree","weakly disagree","weakly agree","unsure","weakly agree","weakly agree","disagree","weakly disagree","weakly agree","weakly agree","unsure","agree","disagree","2","2","arg_1 = 2 and arg_2 = 1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","","yes, the value should be propagated","","they are not very different actually, its a matter of syntax familiarity","they are not very different actually, its a matter of syntax familiarity","Sample 3","Sample 1","Sample 2","if-else if switch has at most 2 cases and switch otherwise","","one expression","","data type conversion is not required","data type conversion is required","Sample 1","Sample 2","Sample 3","yes, goto is a good choice","","copy statements to simplify the structure","","","","Sample 1","Sample 2","Sample 3","while","","continue and if","","","","Sample 3","Sample 2","Sample 1","if(var == 0)","","","","Sample 2","Sample 1","Sample 3","for-loops","","","","","limit 3","","3","","Yes","","Yes","","No","","No","","No","","No","","","for-loop","","decimal + char as comment","char + decimal as comment","char","decimal","","Scheme 3 (dog,...)","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","Scheme 2 (v1,...)","Scheme 4 (a,...)","nouns with varying lengths","Scheme 3","Scheme 1","Scheme 4","Scheme 2","nouns with varying length, i.e., dog, cruise, mangosteen, etc","I prefer Reuse","","","","","","9901.37","32.61","","","","","","2.07","","","838.28","","","","","","","","","","","","","","","7.82","","493.09","","","","","","106.22","","","","","","443.08","","","","","","1179.88","","","","","","6139.37","","","","","131.16","","","","","5.31","","50.51","","67.2","","54.59","","","20.88","","50.89","","","153.16","","","74.57","","","28.13","","4.12","","18.43","","",""
"107","Master","Less","","3","4","4","Yes","No","No","No","No","No","OLLYDEBUG","","3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","undecided","undecided","weakly agree","weakly disagree","weakly disagree","undecided","weakly agree","undecided","undecided","undecided","weakly disagree","weakly agree","undecided","weakly agree","weakly agree","weakly disagree","weakly agree","4","I do not know","arg_1 = 2 and arg_2 = 1","","","Sample 3","Sample 2","Sample 1","if-else","","no, the value should not be propagated","","Sample 3 is easier to interprete","","Sample 1","Sample 3","Sample 2","if-else","","separated expressions","","","","Sample 1","Sample 2","Sample 3","yes, goto is a good choice","","never copy a statement","","","","Sample 1","Sample 3","Sample 2","while","","if-else","","","","Sample 2","Sample 1","Sample 3","if(var == 0)","","","","Sample 2","Sample 3","Sample 1","while-loops","","","","","limit 1","Rest not familiar with the boolean function","2","","Yes","Understandable","No","","No","","No","","No","","No","","","while-loop","","char","char + decimal as comment","decimal + char as comment","decimal","","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","Scheme 2 (v1,...)","Scheme 3 (dog,...)","Scheme 4 (a,...)","","Scheme 4","Scheme 1","Scheme 2","Scheme 3","","I prefer Reuse","","","IP Address in clear; URL in clear ","GUI - easy with wizard guide","","2427.9","91.74","","","","","","12.06","","","","","","","","","","","","","979.39","","","","","6.45","","178.81","","","","","","114.34","","","","","","142.63","","","","","","147.26","","","","","","57.26","","","","","68.28","","","","","6.62","","78.76","","67.17","","73.9","","","36","","97.32","","","81.84","","","72.48","","","34.72","","3.8","","77.07","","",""
"108","Bachelor","Less","","3","1","3","No","No","Yes","No","No","No","IDA","","2","","","","","","","","","","","","","","","","","","","","","","agree","agree","weakly disagree","weakly agree","undecided","weakly disagree","agree","disagree","strongly disagree","disagree","strongly disagree","disagree","disagree","undecided","undecided","undecided","disagree","2","1","arg_1 = 2 and arg_2 = 1","","","","","","","","","","","","","","","","","","","","","","","","Sample 2","Sample 3","Sample 1","if-else","","yes, the value should be propagated","","if-else cases","Label","Sample 1","Sample 3","Sample 2","if-else","","one expression","","comprehensible flow","switch cases","Sample 1","Sample 2","Sample 3","no, goto should not be used","","never copy a statement","","for loop","while True statement","Sample 1","Sample 2","Sample 3","while","","if-else","","Structured view","Label","Sample 2","Sample 1","Sample 3","if(var == 0)","","if == 0 statement","","Sample 2","Sample 3","Sample 1","for-loops","","for statement ","do while","","limit 10","","2","","No","","Yes","","Yes","","Yes","","No","","No","","","for-loop","","char + decimal as comment","decimal + char as comment","char","decimal","","Scheme 3 (dog,...)","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","Scheme 4 (a,...)","Scheme 2 (v1,...)","","Scheme 1","Scheme 4","Scheme 3","Scheme 2","","I prefer No Reuse","","","","","","2734.68","37.93","","","","","","2.85","","","","","","","","1682.33","","","","","","","","","","3.39","","123.53","","","","","","109.1","","","","","","83.93","","","","","","80.43","","","","","","80.05","","","","","49.49","","","","","7.31","","88.27","","24.76","","81.01","","","29.1","","75.93","","","52.37","","","23.77","","","67.98","","5.1","","26.05","","",""
"109","Master","Daily","","5","5","9","Yes","No","No","No","No","No","","","2","","","","","","","","","","","","","","","","","","","","","","strongly disagree","strongly agree","weakly disagree","weakly agree","weakly agree","weakly disagree","weakly agree","weakly disagree","strongly disagree","undecided","strongly disagree","weakly agree","weakly disagree","disagree","agree","strongly disagree","undecided","2","I do not know","arg_1 = 2 and arg_2 = 1","Inconsistent datatypes. Mixing windows typedefs (DWORD) with default c types (unsigned int) and pseudo types (__int64) feels unclean. Personally I'd prefer only using the types from cstd.h (uint8_t, int64_t, ...), though int8_t vs. char is debatable.","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","","no, the value should not be propagated","","switch","GOTO!","Sample 3","Sample 1","Sample 2","switch","As before, in general I prefer switch, but in this case it cannot properly be represented as switch. Representing it as has been done here is ridiculous. Don't do switch, if *in*equalities are involved.","one expression","","The format string is visible.","The switch obscures the semantics!","Sample 1","Sample 2","Sample 3","no, goto should not be used","Gotos obscure the control flow, make it harder to read. Also feels like the decompiler was just lazy.","copy statements to simplify the structure","I don't see any downsides to copying statements. In particular if it results in cleaner code, i.e. no goto.","Clean, sematics are clear on first pass.","The semantics are completely unclear. In particular the while(1) with break should be avoided if possible.","Sample 1","Sample 2","Sample 3","while","When coding I *never* use do-while. I'd rather unroll the loop once. I find it easier to read.","continue and if","When coding I like to omit the else in favour of a continue. Thus I prefer reading code that was written that way.","Fairly clean. For loop.","do-while and goto!","Sample 2","Sample 1","Sample 3","if(var == 0)","I much prefer explicit zero checks ""== 0"", takes load off my brain. With ""if(var)"" I always have to take a moment to remind myself what that means.","Better local variable detection (no unnecessary arrays) and explicit zero checks.","While instead of for","Sample 2","Sample 3","Sample 1","for-loops","The semantics are more easy to decipher.","It's pretty much the same as I would write the code. Two for loops, rather than nasty whiles.","do {} while(true). Might as well read the disassembly rather than the decompiled code.","","limit 7","","2","","No","","No","","Yes","","Yes","","No","","No","","","while-loop","In this case the for loop does not make it easier to comprehend the semantics. I feel like anything that does more updates that are more complex than *simple* arithmatics ""i += <const>"" or ""i *= <const>"" might be better off being a while loop. I would personally draw the line somewhere around ""i = (i+<const>) % <const>"". That's the most complex statement I would still use a for loop for.","char + decimal as comment","char","decimal + char as comment","decimal","In this particular case it is obvious (for a human) that it's actual characters rather than numbers, but I'd still like the decimal values in case the decompiler misinterpreted the use as characters.","Scheme 2 (v1,...)","Scheme 5 (loc_1,...)","Scheme 1 (var_0,...)","Scheme 4 (a,...)","Scheme 3 (dog,...)","Since the order of the variables does not matter the scheme v1, v2, ... does not provide any information beyond ""this is a variable"". Personally I like to look at the disassembly and the decompilate at the same time. In this scenario something like (v8, vF, ...) could be interesting, referring to the variable offsets ([ebp-8], [ebp-0xF], ...) since it adds information. However this quickly gets impossible when registers are involved.","Scheme 2","Scheme 4","Scheme 1","Scheme 3","No, but the person who came up with the emoji naming should consider calling a therapist. Maybe the police be involved as well.","I prefer Reuse","This is probably the only case in which I like variable reuse. Also I would like the loop variables to be scoped in the loop (for(*int* i = 0; ...)). That would make it obvious that its a variable reuse without side-effects.","","String literals are very important! Not all examples showed them in the decompilate.","In general: Scripting capability. Exposing the AST to a scripting language would be a nice start, but in particular high-level stuff such as listing all local variables with inferred types and where in the AST they are accessed (written or read).

And it would be *really* amazing if you could actually execute (parts of) the code from your scripts without having to copy-paste the code into gcc. In particular I'm thinking about string decryption/deobfuscation. Deobfucating strings with inlined decryption routines tends to be painful to automatically decrypt. Admittedly this is not trivial as you would have to allow the script to feed the code with any outside variables (such as globals, parameters and local variables not part of the executed code).","","3611.14","51.14","","","","","","9.14","","","","","","","","504.98","","","","","","","","","","9.69","","173.46","","","","","","307.29","","","","","","251.63","","","","","","242.85","","","","","","238.69","","","","","161.14","","","","","8.84","","104.08","","35.85","","70.68","","","260.79","","143.56","","","351.57","","","103.7","","","97.24","","6.96","","477.86","","",""
"113","Master","Monthly","","2","3","3","Yes","Yes","No","No","No","No","","","3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","undecided","undecided","weakly disagree","undecided","agree","undecided","weakly agree","weakly disagree","disagree","undecided","strongly disagree","weakly disagree","weakly disagree","weakly agree","undecided","weakly disagree","weakly agree","I do not know","I do not know","arg_1 = 2 and arg_2 = 1","","","Sample 1","Sample 2","Sample 3","switch","","yes, the value should be propagated","","","","Sample 3","Sample 1","Sample 2","if-else","","one expression","","","","Sample 1","Sample 2","Sample 3","yes, goto is a good choice","","copy statements to simplify the structure","","","","Sample 1","Sample 2","Sample 3","while","","if-else","","","","Sample 1","Sample 3","Sample 2","if(var == 0)","","","","Sample 2","Sample 3","Sample 1","for-loops","","","","","limit 7","","3","","No","","No","","Yes","3","Yes","2","Yes","1","No","","","while-loop","","char + decimal as comment","decimal + char as comment","char","decimal","","Scheme 3 (dog,...)","Scheme 2 (v1,...)","Scheme 4 (a,...)","Scheme 5 (loc_1,...)","Scheme 1 (var_0,...)","","Scheme 2","Scheme 4","Scheme 1","Scheme 3","","I prefer No Reuse","","","","","","1359.89","15.06","","","","","","1.63","","","","","","","","","","","","","397.08","","","","","5.35","","40.12","","","","","","38.61","","","","","","48.42","","","","","","56.53","","","","","","54.49","","","","","46.67","","","","","9.37","","89.01","","56.7","","144.74","","","57.65","","63.39","","","66.84","","","42.07","","","76.55","","3.54","","46.07","","",""
"114","Bachelor","Less","","3","1","8","Yes","No","No","No","No","No","","","3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","undecided","weakly agree","weakly disagree","weakly agree","agree","disagree","agree","undecided","disagree","undecided","disagree","strongly agree","strongly disagree","undecided","undecided","agree","agree","2","2","arg_1 = 1 and arg_2 = 2","Dislike: var_1 = arg_1 and var_2 = arg_2 and vice versa appears to only add to the confusion.","","Sample 1","Sample 2","Sample 3","switch","","no, the value should not be propagated","","Clean hierarchy of codes","Labels add to the confusion.","Sample 2","Sample 3","Sample 1","switch","","one expression","","neat. straightforward.","lots of logical thinking needed. <1? <1 and not <0 etc.","Sample 1","Sample 2","Sample 3","no, goto should not be used","","copy statements to simplify the structure","","compact, neat, nicely structured","I dislike my least favourite sample because I have my reasons. Some of the reasons are as follow: it is too verbosive with quite a few variables involved. Another such reason is that the additional variables and lines more difficult to read. Following that, the variables, lines and nesting of the conditional variables added to the difficulty.","Sample 2","Sample 1","Sample 3","while","","if-else","","","","Sample 1","Sample 2","Sample 3","if(var == 0)","Undecided. Depends on the code block following. Sometimes it is more natural for a if (!var).","","","Sample 2","Sample 1","Sample 3","while-loops","No preference.","","","","limit 5","","3","","No","","Yes","","No","","Yes","","Yes","","No","","","while-loop","","char + decimal as comment","decimal + char as comment","char","decimal","","Scheme 2 (v1,...)","Scheme 5 (loc_1,...)","Scheme 1 (var_0,...)","Scheme 3 (dog,...)","Scheme 4 (a,...)","","Scheme 4","Scheme 1","Scheme 2","Scheme 3","","I prefer Reuse","Undecided. Either is fine.","","","","","3223.13","71.49","","","","","","13.95","","","","","","","","","","","","","1040.25","","","","","8.82","","318.95","","","","","","218.13","","","","","","741.15","","","","","","125.06","","","","","","134.68","","","","","73.63","","","","","8.18","","88.69","","37.2","","46.72","","","21.18","","64.6","","","46.73","","","41.49","","","38.22","","9.56","","74.45","","",""
"116","Bachelor","Monthly","","5","2","7","Yes","Yes","No","No","No","No","","","3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","undecided","weakly agree","weakly disagree","weakly agree","undecided","undecided","weakly agree","undecided","disagree","disagree","disagree","disagree","weakly agree","agree","undecided","agree","disagree","2","2","arg_1 = 2 and arg_2 = 1","Dislike: arguments are modified, making it hard to keep track of their values
Like: Short statements","","Sample 1","Sample 2","Sample 3","if-else","I usually prefer if-else for 2 or 3 cases, but do not prefer many nested ifs like in the sample above. ","no, the value should not be propagated","Operations should be preserved, e.g. the incrementing action in ""var_0 + 1"" may be more meaningful than the value being 6.","Very flat (not much nesting), no gotos","Has nested ifs and has a goto","Sample 3","Sample 1","Sample 2","if-else if switch has at most 2 cases and switch otherwise","","one expression","","""else if"" is one expression when there is only one block after else","Unnecessary extra pointer variable (no use of array)","Sample 1","Sample 2","Sample 3","no, goto should not be used","It is fine here when used singly, but in general multiple gotos and labels make code harder to read. ","copy statements to simplify the structure","I think this is useful if the destination statement(s) are simple and short. Perhaps it can be combined with some indicator to tell the reader this statement is duplicated (and not a new code block). ","The for-loop was recognised, making it simpler to read. ","Long while loop with multiple breaks. ","Sample 2","Sample 1","Sample 3","while","","if-else","","Did not have too much redirection that breaks the reading flow (goto, break, continue)","it mixes while with do-while, and it's difficult to keep track of conditions above and below","Sample 1","Sample 2","Sample 3","if(!var)","I don't feel strongly about this one. ! is convenient but could be misleading if the variable is used as a counter and not a flag.","The for-loops are elegant and easy to read. ","Used while loops when for-loops were possible, but this was not too bad. ","Sample 2","Sample 1","Sample 3","for-loops","","For-loops are elegant and the counters are already named to defaults (i, j)","while-true with breaks","","limit 5","","2","It seems useful to replace long subexpressions with variables when the same subexpression is later used 2 or more times. ","No","","Yes","","Yes","","Yes","","No","","No","","Anything but samples 1 and 6 is okay to read.","while-loop","for-loop is more suitable when the update statement is short, and the inner block has content.","char","decimal + char as comment","char + decimal as comment","decimal","if the byte variable is always compared to a printable-ascii value, char alone is great. ","Scheme 2 (v1,...)","Scheme 3 (dog,...)","Scheme 4 (a,...)","Scheme 1 (var_0,...)","Scheme 5 (loc_1,...)","inputs and outputs can be named specially (e.g. scanf input, file input, return values).
anything that increments can be named from i, j, k...","Scheme 2","Scheme 4","Scheme 3","Scheme 1","if the type is boolean, flag1, flag2...","I prefer Reuse","Reuse is fine as long as i is never used outside the scope of these loops","","- Prefer arguments to never change value within a function
- Perhaps leaving some decompilation preferences configurable, e.g. threshold for preferring switch-case or if-else, threshold for subexpression length
","Code-editor-like features - Zoom, code-block folding, keyboard shortcuts
Perhaps colour-coding of arguments (e.g. a1, a2, a3 having different colours in a palette)
Allow some aesthetic preferences to be configurable, e.g. variable naming conventions, highlighting/font palette...
","(None I can think of, can I get back to you if I find one?)","33507.2","62.02","","","","","","10.31","","","","","","","","","","","","","5379.54","","","","","11.52","","603.36","","","","","","611.78","","","","","","4397.2","","","","","","12329","","","","","","538.79","","","","","279","","","","","5.66","","284.91","","416.19","","535.92","","","82.3","","217.03","","","143.77","","","67.56","","","69.97","","16.65","","7444.68","","",""
"117","Bachelor","Less","","3","3","3","No","Yes","No","No","No","No","","","2","","","","","","","","","","","","","","","","","","","","","","agree","disagree","agree","agree","undecided","undecided","weakly agree","weakly disagree","disagree","weakly disagree","disagree","weakly agree","weakly disagree","weakly agree","weakly disagree","disagree","weakly agree","2","1","arg_1 = 1 and arg_2 = 2","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","if-else","","yes, the value should be propagated","","","","Sample 1","Sample 3","Sample 2","if-else if switch has at most 2 cases and switch otherwise","","one expression","","","","Sample 1","Sample 2","Sample 3","no, goto should not be used","","never copy a statement","","","","Sample 2","Sample 1","Sample 3","while","","if-else","","","","Sample 1","Sample 3","Sample 2","if(var == 0)","","","","Sample 2","Sample 3","Sample 1","while-loops","","","","","limit 10","","2","","Yes","","No","","Yes","","Yes","","No","","No","","","while-loop","","char","char + decimal as comment","decimal + char as comment","decimal","","Scheme 1 (var_0,...)","Scheme 2 (v1,...)","Scheme 4 (a,...)","Scheme 3 (dog,...)","Scheme 5 (loc_1,...)","","Scheme 4","Scheme 2","Scheme 1","Scheme 3","","I prefer No Reuse","","","","","","2287.6","27.05","","","","","","2.32","","","","","","","","579.48","","","","","","","","","","3.89","","199.94","","","","","","126.37","","","","","","190.59","","","","","","447.89","","","","","","156.44","","","","","62.54","","","","","3.7","","238.44","","31.45","","52.18","","","13.58","","57.09","","","36","","","21.41","","","30.37","","3.33","","3.54","","",""
"120","Master","Monthly",">5 years","6","6","4","Yes","Yes","No","No","Yes","No","","","1","weakly agree","weakly agree","unsure","weakly agree","agree","weakly disagree","unsure","unsure","disagree","disagree","disagree","weakly disagree","weakly disagree","weakly agree","disagree","weakly agree","unsure","2","2","arg_1 = 2 and arg_2 = 1","There is no recursion","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sample 1","Sample 2","Sample 3","switch","","yes, the value should be propagated","","Switch-Case is super clean","Its long and confusing. One has to keep to many things in mind","Sample 2","Sample 3","Sample 1","switch","The code seems less crowded with switch","one expression","","The more python-esque indentation. C/C++ style indentation is ugly in my opinion","Too many ifs mess with ones head, because you have to keep a lot of stuff in mind","Sample 1","Sample 2","Sample 3","no, goto should not be used","It messes with my head","copy statements to simplify the structure","Goto is super ugly. I want decompilation to be easy to understand and not adhere to clean code rules","Its clean and easy to read","Its long, its ugly and it have to keep too much stuff in mind","Sample 1","Sample 2","Sample 3","while","do-while leads to crowded code","continue and if","if-else leads to crowded code","No else branches","Long and crowded","Sample 1","Sample 2","Sample 3","if(!var)","","Shorter and for-loop","I hate while-loops","Sample 2","Sample 3","Sample 1","for-loops","while-loops make me sad. The loop body is more crowded","For-loops","Do-while","","limit 10","It would never try and understand these without running the individual lines. Limit 10 makes it easiest for me to copy&paste","4","Again.. Too much calculating in head. So long lines for easy copy&paste","No","","No","","No","","Yes","","Yes","","Yes","","","for-loop","It does not mattert what I choose here.. This seems too complicated in its details and too simple in its interface. In a real world scenario I would not try to understand this and instead let it run with various inputs and extrapolate the functionality from that.","decimal + char as comment","char + decimal as comment","char","decimal","As many information as possible","Scheme 1 (var_0,...)","Scheme 2 (v1,...)","Scheme 4 (a,...)","Scheme 5 (loc_1,...)","Scheme 3 (dog,...)","It really doesn't matter except for cheme 3 :)","Scheme 1","Scheme 2","Scheme 4","Scheme 3","It does not matter :)","I prefer Reuse","It does not matter :)","","I don't know ","Jetbrains-style refactorings. Like being able to extract variables or even functionblocks. For example, malware tend to have really long functions. I would love to be able to extract functions from that","Mirai's C&C command parsing is fun!","2488.58","42.42","","","","","","8.06","","","613.6","","","","","","","","","","","","","","","6.19","","83.52","","","","","","296.28","","","","","","249.94","","","","","","169.86","","","","","","121.82","","","","","81.6","","","","","10.42","","69","","53.27","","75.76","","","203.16","","56.64","","","87.19","","","24.67","","","41.28","","6.87","","187.03","","",""


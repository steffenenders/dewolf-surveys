"Response ID","Did you take part in the decompiler survey last year?","How much time (approx.) did you spend working with C code? (Development, Reviews, Learning, ...)","How much time did you spend reversing executables before?","Please consider the following decompiled function:    ","What does this function return?  Please note that you cannot change the answer after selecting it.","What does this function return?  Please note that you cannot change the answer after selecting it. [Comment]","The function shown here is a Domain Generation Algorithm (DGA) which are commonly used to generate different domain names in order to implement domain fluxing.  The main goal of these algorithms is to allow communication with an endpoint those domains is going to change sequentially (for example: in a botnet).","Please type all utilized top-level-domains (TLDs)","Which Top-Level domain will be utilized the most?","Which of these second-level domains can potentially be generated by the function? [simpmpfp]","Which of these second-level domains can potentially be generated by the function? [xfbcbcic]","Which of these second-level domains can potentially be generated by the function? [facebook]","Which of these second-level domains can potentially be generated by the function? [squzuzfz]","Which of these second-level domains can potentially be generated by the function? [rlpmpmgmjdh]","How many domains can potentially be generated by this function per day?",".tab {   overflow: hidden;   border: 1px solid #ccc;   background-color: #f1f1f1; }  /* Style the buttons that are used to open the tab content */ .tab button {   background-color: inherit;   color:black;   float: left;   border: none;   outline: none;   cursor: pointer;   padding: 14px 16px;   transition: 0.3s; }  /* Change background color of buttons on hover */ .tab button:hover {   background-color: #ddd; }  /* Create an active/current tablink class */ .tab button.active {   background-color: #ccc; }  /* Style the tab content */ .tabcontent {   display: none;   padding: 0;   border: 1px solid #ccc;   border-top: none; }   hexraysghidrabinaryninjadewolfsnowmanretdecjeb                                   ","Which aspects in the decompiled codes above is especially favorable to you?","Which aspects of the presented decompiled functions do you deem unhelpful or hamper your understanding of the code?","Thank you for getting this far!  If you would like to leave us any feedback about the survey, please use the lines below to help us improve ourselves.","Total time","Group time: Assesment","Question time: lastsurvey","Question time: c","Question time: reversing","Group time: Comprehension","Question time: code","Question time: purpose","Question time: hint","Question time: tlds","Question time: frequent","Question time: domains","Question time: entropy","Group time: Comparision","Question time: decompiler","Question time: ranking","Question time: positive","Question time: negative","Group time: Feedback","Question time: feedback"
"1","Yes","More than a year","More than a year","","Generates random domains","Obviuously does not encrypt or manipulate system time.
Function does not obtain enough information to do virtual machine detection.

ASCII printable text in result most likely points to generation of random domains.","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","No","No","2941884","","hexrays: Automatic renaming of some variables, creation of structs.
ghira: As above.
dewolf: Seems to be the cleanest. Likely not as ""aggressive"" in analysis, but that is favourable in many situations.
snowman: Useful information, but with drawbacks.
retdec: likewise.
","ghidra: Not as good at handling loops. (e.g, line 14)
binary ninja: Nasty way of naming variables.
snowman: type-casting is useful when deep diving, but for quick glances, it only adds to clutter the viewport. (hotkey to toggle?)
retdec: Addresses on comments only add to the clutter.
jeb: Type-casting seems off","More code decompilation examples would be helpful.","2535.09","301.84","","","","872.34","","","","","","","","1185.5","","","","","175.41",""
"4","Yes","Serveral days","A few hours","","No Idea","it does something with the system time apparently. Maybe a repeatedly called generator function?","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","Yes","No","86400000","","hexrays: type info
ghidra: type info
binaryninja: -
dewolf: looks simple and uncluttered
snowman: -
retdec: -
jeb: type info","hexrays: I don't care about registers
ghidra: numbers represented as char strings, all those () and * and shit
binaryninja: I don't care about registers, not even in variable names
dewolf: -
snowman: are we using registers as variable names again? also, what is this casting nonsense
retdec: What are those comments about
jeb: all those () and *","","2363.86","18.56","","","","1875.68","","","","","","","","457.57","","","","","12.05",""
"5","No","Serveral days","More than a year","","Generates random domains","","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","No","No","440301256704","","binaryninja: the switch-statement is represented as if-statement. Values, especially numbers, are shown as hexdecimals.
hexrays:  de-obfuscation  of variables, that's neat. 
ghidra: type-casting is shown.
dewolf: proper for-loop. type-casting shown. Values are well very represented and only then shown as characters where appropriate.
snowman: -
retdec: usage of indentation
jeb: the best switch-statement of all shown decompilations: no unnecessary brackets, a default statement, ... -> allows a clear track of flow here. Also, good type deduction for the systemTime.","binaryninja: the for-loop is shown as while loop. Casts are sometimes difficult to read.
hexrays: the default in the switch-statement bugs me and it is redundant. Usage of decimal values seems inappropriate here.
ghidra: strange naming of variables.  local_5 is shown as character, which confuses more than it helps.
dewolf: no indentation in switch-statement
snowman: not clear what intrinsic does. Casts clutter the lines. Very bad naming convention (variable names should be longer)
retdec: those comments... really? Fall-through cases are less clear with these brackets
jeb: too many casts (line 8).","","3824.31","31.36","","","","2424.49","","","","","","","","1360.23","","","","","8.23",""
"6","No","On a regular basis","A few hours","","Manipulates the system time","for loop changes first 8 bytes of output, switch statement last 8 bytes. Both changes depend on system time.","",".to, .net, .ru, .com",".com","Yes","Yes","Yes","Yes","No","345600","","hexray, snowman, retdec: addresses, registers as variable names, or in comments (guess I prefer it as comment as I can rename vars)

dewolf, retdec: short lines
","I lack the experience to say what I see as unhelpful other than the opposit of question 1","","1114.47","21.02","","","","784.32","","","","","","","","305.65","","","","","3.48",""
"7","Yes","On a regular basis","More than a year","","Generates random domains"," It returns some random (not really) values generated from system time and tick count. Probably uses it to generate random domains.","",".com .net .ru .to ",".com","Yes","Yes","Yes","No","No","2073600000","","hex-rays, cleanest code with the min amt of variables used. variable names makes more sense. ","binja's (and snowman) variables being named after their registers is a huge pain to read, I also have no idea what is sx.d etc. ","","2957.06","17.95","","","","2673.67","","","","","","","","259.93","","","","","5.51",""
"9","Yes","More than a year","Serveral days","","Manipulates the system time","","",".com, .to, .net, .ru",".com","Yes","Yes","No","No","No","4","","hexrays, ghidra: variable name guessing, including struct members
jeb: variable name guessing","binaryninja, snowman: very basic disassembly, looking at their assembly codes might be more useful. ","","676.63","15.98","","","","87.27","","","","","","","","565.67","","","","","7.71",""
"10","No","Serveral days","Serveral days","","Encryptes memory regions","","",".to, .net,  .com",".to","","","","","No","43200000","","Using strings resolved e.g: lpSystemTime->wYear in line 16","In line 19, &lpSystemTime->wHour replaces the address calculation. May be confusing.","NIL","1797.98","35.38","","","","1572.35","","","","","","","","181.39","","","","","8.86",""
"14","Yes","On a regular basis","On a regular basis","","Generates random domains","","",".com, .to, .net, .ru",".com","","","","","","4294967296","","Hexrays: structure aware (e.g. LPSYSTEMTIME), renames variables based on what is known from the windows APIs (e.g. GetTickCount())","ghidra: Converts the variable to a char (local_5) in the while loop. Not structure-aware as well (e.g. &lpSystemTime->wYear + (int)local_5): have to manually calculate the offset)","","1030.81","6.49","","","","621.74","","","","","","","","397.63","","","","","4.95",""
"16","Yes","Serveral days","More than a year","","Generates random domains","DGA","",".com, .ru, .net, .to",".com","Yes","Yes","Yes","Yes","No","110075314176","","* default case for switch statement: hexrays, jeb
* struct resolution: e.g. &lpSystemTime->wSecond: hexrays, ghidra, (jeb)
* correct variable type cast, e.g. LPSYSTEMTIME lpSystemTime: hexrays, ghidra, jeb
* DGA algorithm easily readable in: dewolf
* switch case possibilities: TickCount % 8 in hexrays, ","* weird type castings that clutter the code: ghidra, snowman (!), jeb
* IR: Binja IR is okayish but doesnt even come close to fully decompiled code like in hexrays or jeb
* retdec code formatting and comments (??)
* weird ass  loop condition: ghidra (while local_5 < '\b', the heck is that..","all gucci","881.54","17.26","","","","42.94","","","","","","","","811.34","","","","","10",""
"17","No","On a regular basis","More than a year","","Generates random domains","I don't know how you can dereferance 'var_4', but I guess it's x86?","",".com .to .net .ru",".com","Yes","Yes","Yes","No","No","86400000","","Best one is not surprisingly IDA it seems both very accurate and quite comprehensible. Only thing is that both '1836016430' and '97' should probably be in hex, but there probably is an option to default to hex.
Ghidra struggles with the '%' alot but otherwise it seems pretty much on par.
Dewolf and jeb have rather basic but pretty clean code. They are not trying to be as smart (not trying to infer the LPSYSTEMTIME) which kinda helps in this case as there is an intentional type confusion.
","1) The crazy C++ cast Situation in snowman, also not understanding a cdq before a mod is kinda weird.
2) Binja is not really a decompiler its more of a visualization of their bytecode.
3) Retdec is (I think) a command line tool so the comments at the end of the line make sense, but are really verbose.
     They would probably be less annoying if they were aligned and way to the right. 
4) In Jeb it seems like some of the Casts should be able to get folded. '(unsigned int *)(char *)  = (unsinged int *)' and '(char *)(int + (int)ptr)  = (char *)ptr + int'","","3285.24","38.65","","","","1192.03","","","","","","","","2046.15","","","","","8.41",""
"18","No","On a regular basis","On a regular basis","","Generates random domains","","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","No","No","768","","hexrays,  ghidra, retdec, jeb:
- recognize LPSYSTEMTIME type -> also struct fields recognizable (e.g. lpSystemTime->wYear) (had to look this up via docs.microsoft.com)

generally: viewer lines to read is (mostly) better

","snowman:
- uses C++ style casts which is a bit strange
- inline assembly (e.g. cdq) should be avoided -> use casts for that

binaryninja:
- poor type recognition, also sx.q, zx.d etc. not nice to read if you don't know what it means

hexrays vs. dewolf:
- `TickCount % 8` vs `(((int) var_1) % 0x8) - 0x1)` -> this is IMHO not the same condition... but +1 for the modulo vs OR representation

ghidra:
- loop recognition and variable usage
  while (local_5 < '\b') {
    *(byte *)((int)&lpSystemTime->wYear + (int)local_5) =
         (byte)(*(byte *)((int)&lpSystemTime->wYear + (int)local_5) ^ (byte)DVar1) % 0x18 + 0x61;
    local_5 = local_5 + '\x01';
  }
pretty messed up for a simple for loop that counts from 0 to 7 :D

binaryninja:
- if vs. switch... switch is better to read

hexrays:
- has a redundant default: return lpSystemTime -> +1 for dewolf

snowman:
-  goto 0x40112d; -> no idea where that is ^^
- C++ casts clutter everything and have no real ""advantage"" if this isn't a C++ program

dewolf:
- i don't like the GetSystemTime(lpSystemTime: var_0); lpSystemTime

jeb:
- inconsistent use of hex representations e.g.
      *ptr0 = 1836016430; // decimal
      *(ptr0 + 1) = 0; // decimal
      int v2 = (int)v1 & 0x80000007; // hex

ghidra and others that do not use the % operator:
- this is way to complicated to be easily recognized:
  uVar3 = (int)(char)(byte)DVar1 & 0x80000007;
  if ((int)uVar3 < 0) {
    uVar3 = (uVar3 - 1 | 0xfffffff8) + 1;
  }
  switch(uVar3) {","This is the first time I actually saw a DGA in C/Pseudo C :D So my results will not be biased be former experience of reversing DGAs.

The usage of available API information (data types, names, struct defs) is one of the most important things to quickly understand what's going on.

Complex expression with low level shifting, bitwise operations should be converted to conditions that are easier to understand (e.g., modulo vs ... | ... )

dewolf + API information would be pretty close to hexrays IMHO

The length of the survey was very manageable and thus was quite entertaining ;)","7916.64","31.89","","","","2520.99","","","","","","","","4968.96","","","","","394.8",""
"28","No","On a regular basis","On a regular basis","","Generates random domains","","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","Yes","No","440301256704","","Heyrays: Automated annotation of the stack layout
Heyrays, Ghidra, binaryninja, dewolf, jeb: Annoate name of GetSystemTime parameter
dewolf: Very clean decompilation. Proper placement of var_0[i] instead of pointer castings","Heyrays: Integers ""randomly"" being in decimal
Heyrays, Ghidra: The default type of the 16 byte array being LPSYSTEMTIME and all access then being treated like it is that type
Snowman: The casts hinder readability
Ghidra, binaryninja, snowman : No for loop detection
Ghidra, binaryninja, snowman, retdec, jeb: Don't understand ""TickCount % 8"" and produce hard to comprehend code for it
snowman:__asm__(""cdq ""); and gotos
binaryninja: Too similar naming scheme and things like sx.q and mods.dp.d(edx_4:eax_6, 0x18)
dewolf: ""- 0x1"" on the switch which causes the -1 case which is a bit more confusing compared to IDA
Ghidra: Random usage of `\b` and `\x01` instead of hex numbers","","1407.11","14.95","","","","498.75","","","","","","","","889.46","","","","","3.95",""
"31","Yes","On a regular basis","On a regular basis","","Manipulates the system time","","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","No","No","86400000","","hexrays: 1) Automatically inferring of the return type of windows API. 2) Renaming of the variables based on the inferred types.
dewolf: 1) Representing the 0x61 constant as 'a'. 2) The for loop that sets the 2nd level domain is much more comprehensible compared to all other because it has less noisy type casting.","binja: Things like ""*(eax + sx.d(var_5)) = (mods.dp.d(edx_4:eax_6, 0x18)).b + 0x61"" is not C and so it's hard to understand","","1483.75","8.69","","","","520.05","","","","","","","","949.21","","","","","5.8",""
"33","No","More than a year","On a regular basis","","Manipulates the system time","Missing cast when var4 is initialized.","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","No","No","24","","HexRays: Reasonable variable names and datatype inference, accurate decompilation, and no redundant typecasts. Optimization to detect modulo arithmetic. Looks the 'cleanest'
Ghidra: Correctly optimizes away the default case in switch statement. Few redundant typecasts. Quite clean
Dewolf: Similar to hexrays, slightly less accurate, but optimizes away the redundant default case in the switch statement. Clean look.
JEB: Casts the malloc to LPSYSTEMTIME correctly. Relatively clean look.
retdec: The comments with addresses is unnecessary bloat","Ghidra: Redundant casts calculating uVar3. No mod 8 optimization. 
Binary Ninja: sx.q, zx.d, mods.dp.d etc. are alien syntax to people used to C. No mod 8 optimization. 
Dewolf: Missing typecast on var4 made the surrounding code very confusing
Snowman: reinterpret_cast / static_cast bloat the screen and hide the other more important code. Unimplemented instruction cdq. goto without a matching label. No mod 8 optimization. 
JEB: A few weird typecasts on the TickCount
","","2688.27","22.23","","","","1164.27","","","","","","","","1495.27","","","","","6.5",""
"41","No","On a regular basis","On a regular basis","","Manipulates the system time","","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","Yes","No","24","","hexrays is the cleanest.","Too much casting, and no API type information.","","1820.37","27.86","","","","1492.67","","","","","","","","295.68","","","","","4.16",""
"47","No","On a regular basis","Serveral days","","Manipulates the system time","","",".idk","","","","","","","0","","In HexRays, it detects the LPSYSTEMTIME struct, and the rest of the code interacting with it is in struct form. Ghidra does the same, albeit in a more standard C way.","In BinaryNinja, the variable names are chosen by the register they were found in, which makes reading the code far harder than with other decompilers. In Dewolf, the type decompilation was far off from other decompilers, making analysis difficult. In Snowman, the use of C++ type casts makes the block of code very cluttered and difficult to understand.","","812.63","21.3","","","","452.19","","","","","","","","334.03","","","","","5.11",""
"50","No","More than a year","Serveral days","","Generates random domains","","","","","","","","","","3600","","hexrays","the comments beside the local variable declaration sometimes are not helpful","","2025.66","7.33","","","","647.67","","","","","","","","1356.18","","","","","14.48",""
"51","Yes","A few hours","Serveral days","","Generates random domains","Returns a string with eight chars + tld   and memory ends with 0x00
e.g.: 
? = random printable char
????????.com
????????.to
????????.net
????????.ru
","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","No","No","86400000","","dewolf:
 - nice and clean switch case structure
-  good variable definition
- ","dewolf:

->   + 'a';  irritated me  at first 
->  switch((((int) var_1) % 0x8) - 0x1)   <- why  ""- 0x1""  if it is only modulo?","","4245.06","663.42","","","","2969.33","","","","","","","","598.38","","","","","13.93",""
"53","No","A few hours","Serveral days","","Generates random domains","To replace the code with RUST since it's far better to use RUST.","","Rust","","","","","","","0","","dewolf",".","Give me more Rust","480.9","15.89","","","","334.39","","","","","","","","99.9","","","","","30.72",""
"57","No","Serveral days","A few hours","","Manipulates the system time","","",".com, .to, .net, .ru",".com","No","No","No","Yes","No","86400000","","dewolf looks very clean and is easy to read
hexrays looks also very clean, you get an idea of the stack trough the comments of esp and ebp
if I would ignore the comments in retdec, its also good to read
jeb is ok, nothing too bad, but would not prefer
about bn I like, that the variable names enumerate the used registers","snowman has this string ""reinterpret_cast<signed char"" that reduces my attention on the important stuff
I dont know exactly why there are addresses in the comments of retdec and could not find anything helpful ","","3020.8","99.53","","","","1886.58","","","","","","","","1010.93","","","","","23.76",""
"58","No","Serveral days","Serveral days","","Generates random domains","First I thought it might be used to generate ""random"" looking domains in order to communicate with a c&c center of a botnet or something similar, but since the generator results depend on the system up time it can not be in sync with another instance of that generator on another machine without communicating the tickcount which would defeat the purpose.","",".com .to .net .ru",".com","Yes","Yes","Yes","No","No","86400000","","It really helps to see the last part of the code as a switch case instead of nested if-statements.
While it might be useful to see all the typecasts / types explicitly I like it more to see more ""clean"" or shorter statements. Therefore I liked the way the while/for loop was presented by all the decompilers except for snowman.
I liked the most: dewolf / retdec / jeb (no particular order)","It was quite easy to determine which domain is used most due to the way the switch case was presented. BinaryNinja does not present that part of the code as a switch case but rather nested if statements which is also fine but - at least to me - harder to wrap my head around it.

The while loop from the snowman generated code looks so awful that it encurages me to ignore it the very second I see it.","After taking a break and resuming the survey I was able to change my first answer because it was not selected anymore.","2473.92","218.05","","","","1570.41","","","","","","","","624.67","","","","","60.79",""
"59","No","On a regular basis","On a regular basis","","Encryptes memory regions","","","","","","","","","","","","","","","556.58","53.37","","","","451.31","","","","","","","","42.5","","","","","9.4",""
"64","No","More than a year","Serveral days","","Generates random domains","var_0 contains the result.
Translates first 8 characters of var_0 from GetSystemTime to presumably an alphabetic string using GetTickCount().
Sets 9th character to some kind of checksum value based on GetTickCount().
Sets 10th character to null byte (presumably string terminator).
","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","No","No","764411904","","Hexrays: The ability to break down the structure of lpSystemTime without requiring me to search for the documentation --> good vraiable naming.","retdec: comments corresponding to address of equivalent instruction bytes make it harder to process the main logic visually.
snowman: excessive display of static_cast and reinterpret_cast","","2083.36","45.29","","","","1685.47","","","","","","","","347.99","","","","","4.61",""
"65","No","On a regular basis","More than a year","","Generates random domains","","",".com, .to, .net, .ru",".com","Yes","Yes","No","No","No","1","","hexrays, ghidra: meaningful variable and field names
dewolf: appears closest to actual written code","binaryninja: bad variable names
snowman: too many casting functions, incomplete decompilation with asm snippets remaining","","1651.39","25.47","","","","1117.66","","","","","","","","497.87","","","","","10.39",""
"67","No","Serveral days","A few hours","","Generates random domains","seems to generate a random string of characters using the time","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","No","No","86400000","","- useful comments (hexrays)
- recognized mod 24 (as decimal int) and the ""a"" as char (dewolf)","- for loop not recognized (ghidra, binaryninja, snowman)
- comparison with char where it does not make sense (ghidra)
- chained type cast (ghidra)
- reinterpret_cast ??? (snowman)
- switch statement not recognized (binaryninja)
- goto (snowman)
- unnecessary many returns (jeb)","","4113.91","1834.78","","","","1061.8","","","","","","","","1208.1","","","","","9.23",""
"69","No","More than a year","More than a year","","Generates random domains","getting system time and performing multiple and and or operation","",".com, .de, .sg, .org,.edu, .int, .gov, .ney, .mil, .my, .ae, .af, .ag",".com","Yes","Yes","No","Yes","No","86400","","dewolf has the most accurate decompiled codes.","In snowman, overuse of reinterpret_cast, static_cast can be confusing","","1331.5","39.73","","","","1001.08","","","","","","","","273.37","","","","","17.32",""
"70","No","A few hours","Serveral days","","Generates random domains","","",".to, .ten, .ur, .moc",".moc","Yes","Yes","Yes","Yes","No","86400000","","looks more like C code","","","775.94","7.09","","","","748.95","","","","","","","","17.56","","","","","2.34",""
"74","No","On a regular basis","More than a year","","Generates random domains","","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","No","No","24","","Hexrays: Naming of the buffer variable with parameter and applying type is usually helpful, although not so much in this case. Code is concise. Switch statement is the simplest amongst the options.
Ghidra: Naming of the buffer variable with parameter and applying type is usually helpful. Reasonably concise decompilation.
Binary Ninja: n/a
Dewolf: Basic but fairly clean and concise decompilation. Not applying the lpSystemTime struct happens to be helpful here, making the loop simpler to read. Switch parameter is simpler than some of the others.
Snowman: n/a
Retdec: Loop is easy to read, not applying the struct happens to be helpful as well.
Jeb: Mostly simple and clean decompilation.","Hexrays: Applying the struct type happens to make the loop harder to read, but it is not a huge issue.
Ghidra: The excess casts can be slightly annoying. Bit manipulation of the switch argument is a bit difficult to parse.
Binary Ninja: The IL is not particularly helpful in my opinion. Would prefer to read the assembly instead.
Dewolf: No particular complaints. Switch could be slightly simplified (see Hexrays version) but is not a huge issue. 
Snowman: Excessive casting along with verbose C++-like casting syntax is off-putting. The bit of inline assembly appearing in the loop is not helpful. Bit manipulation of switch argument is a bit difficult to parse. I have no idea what __intrinsic() is supposed to mean.
Retdec: Decompiled code could be more concise. Arithmetic and bit manipulation of switch argument is difficult to parse.
Jeb: Casting in loop makes it slightly harder to read. Bit manipulation of switch argument is a bit difficult to parse.","","4531.32","1553.36","","","","117.3","","","","","","","","2126.68","","","","","733.98",""
"75","No","Serveral days","Serveral days","","Generates random domains","Compile the code and run","",".com, .net, .to, .ru",".com","Yes","Yes","Yes","Yes","No","256","","You can compile hexrays, ghidra and dewolf code easily to dynamically debug them .","binaryninja decompiler seems to be very convoluted","very interesting survey","492.62","19.52","","","","110.97","","","","","","","","350.92","","","","","11.21",""
"78","No","Serveral days","None","","No Idea","","","","","","","","","","86400000","","hexrays / ghidra:
+ STRUCT TYPE
+ var naming
+ easy switch
","","","4826.46","25.48","","","","2875.26","","","","","","","","1916.35","","","","","9.37",""
"79","Yes","More than a year","None","","Allows Virtual Machine Detection","","",".com,.to,.net,.ru",".com","Yes","Yes","Yes","No","Yes","259200000","","hexrays: types and struckts, variable names","snowman: casts are confusing
ghidra/binaryninja: everything","The code editor did not let me select-to-copy, that was anoying.","2790.75","65.69","","","","2356.47","","","","","","","","273.59","","","","","95",""
"81","No","A few hours","A few hours","","Generates random domains","","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","No","Yes","86400000","","At first glance, dewolf will be most favourable because the previous exercise has required the need to go through the same set of information. 

However if an unbiased mind is to review the codes from the start again, Ghidra would be especially favourable due to the consistency of the values being primarily resolved to hex values.
","snowman decompiler presented a decompiled code that was too messy to be picked up at first glance,

binarywolf decomipler would have been useful for memory diving, but not when determining the use of said code in example

The additional ""*(undefined4 *)"" presented by Ghidra would have thrown me off the table if a prior exercise had not been done.","It is not fair to the other decompiles if one of the contestant's output is used as the precursor exercise.","3092.12","6.79","","","","2231.73","","","","","","","","780.19","","","","","73.41",""
"85","Yes","More than a year","Serveral days","","Generates random domains","","",".to, .net, .ru,.com",".com","Yes","Yes","No","Yes","No","256","","hexrays: naming of variables, type hints, clean switch case, nice for loop
dewolf: very nice for loop, somewhat clean switch case, not resolving lpSystemTime fields (since they are misused anyway)","binaryninja: while loop with horrible body, no switch case
snowman: verbose type casting
retdec: many lines with useless arithmatic expressions","","6376.46","45.89","","","","5675.78","","","","","","","","641.76","","","","","13.03",""
"87","No","A few hours","None","","Generates random domains","","",".com, .org, .gov, .net",".com","","","No","","","86400","","hexrays has better variable naming","snowman has many casts","","653.58","14.62","","","","485.69","","","","","","","","149.76","","","","","3.51",""
"88","No","Serveral days","Serveral days","","No Idea","","",".com, .to, .net, .ru",".com","Yes","Yes","No","Yes","No","24","","dewolf decompiled the codes in a cleaner and more understandable manner compared to the other decompilers.","binaryninja and snowman seems to be too complicated to understand what has been decompiled","","2132.51","32.38","","","","1853.85","","","","","","","","242.32","","","","","3.96",""
"90","Yes","Serveral days","A few hours","","Generates random domains","","","","","Yes","Yes","No","Yes","No","6","","Hexrays managed to provide meaningful name(s) for variables, e.g. p_wHour, TickCount, wHour, wSecond","Going towards assembly (binaryninja), e.g. eax, edx does not seem to be helpful to understand the intent of the code","","27978","30.03","","","","27630.5","","","","","","","","306.96","","","","","10.53",""
"92","No","More than a year","Serveral days","","Generates random domains","Buffer Overflow

var_0[i]: 0-23; 0x00 - 0xE

Switch(0-6)



","",".ru, .net, .com",".ru","Yes","Yes","Yes","Yes","No","463416696","","hexrays, retdec","binaryninja, dewolf","nil","6642.25","18.18","","","","6173.58","","","","","","","","433.53","","","","","16.96",""
"93","Yes","None","A few hours","","No Idea","","",".a",".moc","No","No","No","No","No","1","","using switch and case for options","Using cpu register name in the code","No feedback at the moment","353.75","10.79","","","","129.63","","","","","","","","182.56","","","","","30.77",""
"94","Yes","None","A few hours","","No Idea","Look like always return ""a""","",".a",".a","No","No","No","No","No","1","","Switch and choice options","using cpu register name in the code","Not at the moment","113.35","12.1","","","","50.11","","","","","","","","37.44","","","","","13.7",""
"101","Yes","More than a year","A few hours","","Generates random domains","","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","No","No","24","","I like the variable naming of hexrays as it already contains some meaning.

I like that binaryninja, retdec, and jeb combine variable declaration and definition where possible. Especially jeb has only a short variable declaration/definition section at the beginning and moves the definition of loop variables into the loop. This helps keeping the code compact and doesn't force me to remember lots of variables.

In general, I like that hexrays and ghidra seem to know the structure of LPSYSTEMTIME and use its field accessors (->wYear, ->wHour). Although in this particular example this doesn't really help or make sense, in general I think this would be useful.

This is my favorite loop header ""for(char i = 0; i < 8; ++i) {"" (jeb). The for loop is definitely better that all while loops.

From an overall perspective, dewolfs output looks ""most natural"" to me. I. e. this could be code as written by a human. The output is rather uncluttered (no cast chains, magic numbers, or special notations).","Basically, the things that make the code feel ""unnatural"":

I don't like long cast chains. In jeb, there is the part ""(unsigned char)((unsigned int)*(char*)((int)i + (int)lpSystemTime)"". Here it's quite easy to miss the i in the middle. This gets worse when we use C++ casts as snowman does. This makes it really hard to find actual code in between the cast operations.

I also don't like special notation as binaryninja uses. There we have this .b and .d and an sx function which are not really C. You need special knowledge to find out what they mean and I'd prefer not having to know this when reading the output of a debugger. Especially, since they don't help in understanding the code in this example.

The same holds for some magic constants which are present in retdec for example (lines 13-14). I'd have a hard time understanding why they are there and what they do.

Finally, I don't like that ghidra and binaryninja use hex notation also for small integers. In the malloc call I definitely prefer 16 over 0x10.","This was more fun that the last one! ;-)

When asked again which aspect of compiler output I like, it would be cool to have the ability to comment inline in the output as e. g. in a code review. But I'm not sure if this is technically possible. Also, it would be nice to have the different decompiler outputs side-by-side so that I don't have to click through the tabs.

Can we get the solutions?","2291.67","9.79","","","","701.45","","","","","","","","1326.53","","","","","253.9",""
"102","Yes","On a regular basis","On a regular basis","","Generates random domains","","",".com,.to,.net,.ru",".com","Yes","Yes","Yes","No","No","256","","hexrays: struct resolution implies reuse of fields for other purpose (wHour,wMin for TLD),  inconsistent number display (dec, hex)
ghidra: unlucky comparions (local_5 < '\b'), but somewhat consistent use of hex numbers. logic expressions are a bit harder to understand (bitmasking, ...)
binja: explicit registers instead of abstraction makes it harder to comprehend.
dewolf: looks clean, but inconsistent number display (dec, hex)
snowman: too much casting, no simplification through resolved aliasing, inconsistent number display (dec, hex)
retdec: VAs as comments clutter the code, this code be solved better with highlighting in a UI
jeb: assignment GetTickCount->DWORD->char makes it somewhat more obvious there are only 256 values possible","while probably most accurate, too fine-grained output (binja) is a bit contraproductive for fast analysis (might as well look at assembly then). 
too much casting clutters the output (snowman).
automated application of structs and fields is usually very helpful, here it's potentially slightly confusing because of the ""unintended"" use (hexrays,ghidra).","","1420.23","17.25","","","","628.12","","","","","","","","771.3","","","","","3.56",""
"105","No","On a regular basis","A few hours","","Manipulates the system time","The char * seems to be a `SYSTEMTIME`struct. The loop manipulates the first four WORDS: year, month, week, day byte wise. The var_4 int points to hour and minute and changes this values in the switch statement. The allocated pointer to the time struct is returned. Since this does not really change the system time and the values are out of valid time values, I have no idea.","",".com, .to, .net, .ru",".com","Yes","Yes","Yes","No","No","440301256704","","The correct typing of the LPSYSTEMTIME (hexrays, ghidra, jeb) variable in this case is not helpful, in other cases it may be though.
hexrays: switch statement seems clearer
dewolf, retdec: clean layout","hexray: switching between hex und dec representation of numbers.
ghidra: while loop with char limit mixed with hex increment
hexrays, ghidra, jeb: in this case, the correct type LPSYSTEMTIME and the resulting byte casting in the loop 
binaryninja: weired style
snowman: cluttering c++ casts
dewolf, retdec: incorrect types sometimes
retdec, jeb: brackets in switch cases may lead to false assumptions","","5017.33","29.29","","","","3739.67","","","","","","","","1237.45","","","","","10.92",""
"106","Yes","A few hours","Serveral days","","Generates random domains","","",".com, .ru, .neu",".com","","","","","","16","","ease of understanding, jeb.","require a longer time to understand the codes, snowman","","3972.83","312.6","","","","3354.05","","","","","","","","292.85","","","","","13.33",""
"110","Yes","Serveral days","Serveral days","","No Idea","","","","","","","","","","0","","dwolf code make it easy to analyze
","Snowman and gihidra code can be hard to read","Nil","448.01","17.04","","","","85.29","","","","","","","","326.88","","","","","18.8",""

